{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/material.module.ts","webpack:///src/app/services/audio.service.ts","webpack:///src/app/services/dialog.service.ts","webpack:///src/app/services/game.service.ts","webpack:///src/app/services/toast.service.ts","webpack:///src/app/shared/components/dialog/confirmation-dialog/confirmation-dialog-data.ts","webpack:///src/app/shared/components/dialog/confirmation-dialog/confirmation-dialog.component.ts","webpack:///src/app/shared/components/dialog/confirmation-dialog/confirmation-dialog.component.html","webpack:///src/app/shared/components/dialog/dialog.module.ts","webpack:///src/app/shared/components/input/abstract-input.component.ts","webpack:///src/app/shared/components/input/input-label/input-label.component.ts","webpack:///src/app/shared/components/input/input-label/input-label.component.html","webpack:///src/app/shared/components/input/input-number/input-number.component.ts","webpack:///src/app/shared/components/input/input-number/input-number.component.html","webpack:///src/app/shared/components/input/input-text/input-text.component.ts","webpack:///src/app/shared/components/input/input-text/input-text.component.html","webpack:///src/app/shared/components/input/input.module.ts","webpack:///src/app/shared/components/input/select/select.component.ts","webpack:///src/app/shared/components/input/select/select.component.html","webpack:///src/app/shared/components/input/upload-image/upload-image.component.ts","webpack:///src/app/shared/components/input/upload-image/upload-image.component.html","webpack:///src/app/shared/constants/global.values.ts","webpack:///src/app/shared/constants/icons.ts","webpack:///src/app/shared/enums/audio.enum.ts","webpack:///src/app/shared/enums/card-position-id-type.enum.ts","webpack:///src/app/shared/model/card-image.model.ts","webpack:///src/app/shared/model/card.ts","webpack:///src/app/shared/model/game-config.model.ts","webpack:///src/app/shared/util/array.util.ts","webpack:///src/app/views/game/game.module.ts","webpack:///src/app/views/game/game/game.component.ts","webpack:///src/app/views/game/game/game.component.html","webpack:///src/app/views/game/memory-card/memory-card.component.ts","webpack:///src/app/views/game/memory-card/memory-card.component.html","webpack:///src/app/views/game/navbar/navbar.component.ts","webpack:///src/app/views/game/navbar/navbar.component.html","webpack:///src/app/views/home/game-config-form/game-config-form.component.ts","webpack:///src/app/views/home/game-config-form/game-config-form.component.html","webpack:///src/app/views/home/home.module.ts","webpack:///src/app/views/home/home/home.component.ts","webpack:///src/app/views/home/home/home.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","loadChildren","m","HomeModule","GameModule","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","MaterialModule","AUDIO_DIR_PATH","AUDIO_SRC","CORRECT","TURN_CARD","WIN","AudioService","_allLoaded","_audioMap","Object","entries","forEach","key","src","_load","audio","Audio","load","audioKey","play","providedIn","DialogService","dialog","widthPercent","window","screen","width","data","dialogRef","open","_getWidthAccordingScreen","afterClosed","subscribe","confirm","okCallback","IMG_FILENAME_SEP","GameService","library","router","audioService","_pairCount","_coverCards","_selectedCard1","_selectedCard2","addIcons","_gameConfig","navigate","gameConfig","goHome","numPairs","singleImgPerPair","_getCardsForDifferentImagesPerPair","_getCardsForSameImagePerPair","cards","cardImages","map","img","i","_getFinalShuffledCardsWithId","_shuffleCards","JSON","parse","stringify","card","cardPositionIdType","IMAGES","icon","_getFilenamePrefixForDiffImagesPerPair","filter","_getCardImageFilenamePrefix","push","filenames","occurrences","getNumOccurrences","length","values","some","count","cardImage","filename","split","index","temp","newIdx","Math","floor","random","choosen","isGameFinished","setTimeout","next","win","winNotificationTimeout","asObservable","pipe","ToastService","message","milliseconds","_showToast","close","isVisible","type","backgroundColor","mixin","toast","position","timer","showConfirmButton","showCloseButton","customClass","title","background","fire","error","ConfirmationDialogData","DialogHeader","ConfirmationDialogComponent","DialogModule","AbstractInputComponent","flexDirectionRow","disabled","onChange","_originalRequired","isRequired","form","controlName","model","controls","formControl","hasError","errorKey","invalid","value","_setFormControlAsInvalid","control","setErrors","markAsTouched","_setAsValid","_setAsRequired","_setFormControlAsValid","_setFormControlAsRequired","template","InputLabelComponent","required","InputNumberComponent","min","max","$event","target","valueAsNumber","isNaN","emit","sendValueChange","InputTextComponent","placeholder","maxLength","setValue","inputType","sendChangeEvent","InputModule","schemas","SelectComponent","ALL_OPTION","options","valueAttribute","labelAttribute","multiple","useFullOptionAsValue","onFinishedLoading","showLoadingOptionsError","_allSelected","checkForm","changes","currentValue","option","$eventValue","allOptionLabel","_onChangeSelectionMultiple","includes","_allOption","selected","onChangeSelection","UploadImageComponent","toastService","ACCEPT_IMG","selectAllDir","_numFiles","_images","_extractFiles","files","allOk","_inputElem","nativeElement","accept","x","replace","join","file","_readFile","fileList","item","reader","FileReader","onload","fileReaderEvent","result","name","readAsDataURL","VALUES","ICONS","AudioEnum","CardPositionIdTypeEnum","CardImage","base64","Card","GameConfig","numPairImages","ArrayUtil","arr1","arr2","every","arr","reduce","acc","curr","component","forChild","GameComponent","gameService","dialogService","backgroundStyle","cardRows","config","_goHome","toUpperCase","backgroundImgSrc","_setBoardDim","_startNewGame","numCards","numCols","numRows","_boardDim","BoardDim","ROW_COLUMN","grid","rows","Array","r","String","fromCharCode","charCodeAt","columns","c","getCards","idx","slice","_printPairs","indices","pairs","rowCards","j","findIndex","console","log","_checkGameFinishedAndDoIt","confirmQuestion","callback","_openConfirmationDialog","openConfirmationDialog","header","iconColor","bodyText","$card","onChooseCard","_openNewGameDialog","MemoryCardComponent","FRONT_ID_TYPE","onSelect","_isRotated","frontIdType","getCoveredCards","coveredCards","onClick","NavbarComponent","parent","InputTypeEnum","GameConfigFormComponent","fb","INPUT_TYPE","MANUALLY","numImagesPerPairOptions","cardPositionOptions","onChangeInputType","CONFIG_FILE","group","_initForm","_setOptions","NUMBERS","label","markAllAsTouched","showInvalidFormError","create","assign","HomeComponent","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        loadChildren: () => import('./views/home/home.module').then(m => m.HomeModule)\r\n    },\r\n    {\r\n        path: 'game',\r\n        loadChildren: () => import('./views/game/game.module').then(m => m.GameModule)\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n}\r\n","<div class=\"content\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { MaterialModule } from './material.module';\nimport { GameModule } from './views/game/game.module';\nimport { HomeModule } from './views/home/home.module';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        MaterialModule,\n        HomeModule,\n        GameModule,\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n    imports: [\r\n        A11yModule,\r\n        CdkStepperModule,\r\n        CdkTableModule,\r\n        CdkTreeModule,\r\n        DragDropModule,\r\n        MatAutocompleteModule,\r\n        MatBadgeModule,\r\n        MatBottomSheetModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatCardModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatStepperModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatDividerModule,\r\n        MatExpansionModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatNativeDateModule,\r\n        MatPaginatorModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatRadioModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatSidenavModule,\r\n        MatSliderModule,\r\n        MatSlideToggleModule,\r\n        MatSnackBarModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatTabsModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        MatTreeModule,\r\n        PortalModule,\r\n        ScrollingModule,\r\n    ],\r\n    exports: [\r\n        A11yModule,\r\n        CdkStepperModule,\r\n        CdkTableModule,\r\n        CdkTreeModule,\r\n        DragDropModule,\r\n        MatAutocompleteModule,\r\n        MatBadgeModule,\r\n        MatBottomSheetModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatCardModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatStepperModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatDividerModule,\r\n        MatExpansionModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatNativeDateModule,\r\n        MatPaginatorModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatRadioModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatSidenavModule,\r\n        MatSliderModule,\r\n        MatSlideToggleModule,\r\n        MatSnackBarModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatTabsModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        MatTreeModule,\r\n        PortalModule,\r\n        ScrollingModule,\r\n    ],\r\n})\r\nexport class MaterialModule {\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { AudioEnum } from '../shared/enums/audio.enum';\n\nconst AUDIO_DIR_PATH = 'assets/audio';\nconst AUDIO_SRC = {\n    [AudioEnum.CORRECT]: 'correct.mp3',\n    [AudioEnum.TURN_CARD]: 'page-turn.mp3',\n    [AudioEnum.WIN]: 'tada.mp3',\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AudioService {\n\n    private _audioMap: { [key: number]: HTMLAudioElement };\n    private _allLoaded: boolean = false;\n\n    load() {\n        if (this._allLoaded) {\n            return;\n        }\n        this._audioMap = {};\n        Object.entries(AUDIO_SRC).forEach(([key,src]) => {\n            this._audioMap[key] = this._load(src);\n        });\n        this._allLoaded = true;\n    }\n\n    private _load(src: string) {\n        let audio = new Audio(`${AUDIO_DIR_PATH}/${src}`);\n        audio.load();\n        return audio;\n    }\n\n    play(audioKey: AudioEnum) {\n        (this._audioMap[audioKey]).play();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ConfirmationDialogData } from '../shared/components/dialog/confirmation-dialog/confirmation-dialog-data';\r\nimport { ConfirmationDialogComponent } from '../shared/components/dialog/confirmation-dialog/confirmation-dialog.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n\r\n    constructor(\r\n        private dialog: MatDialog,\r\n    ) { }\r\n\r\n    private _getWidthAccordingScreen(widthPercent?: number) {\r\n        return (window.screen.width < 700 ? \r\n            90 : \r\n            widthPercent || 60\r\n        ) + '%';\r\n    }\r\n\r\n    openConfirmationDialog(data: ConfirmationDialogData) {\r\n        const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\r\n            width: this._getWidthAccordingScreen(40),\r\n            data: data\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(confirm => {\r\n            if (!confirm) {\r\n                return;\r\n            }\r\n            data.okCallback();\r\n        });\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FaIconLibrary } from '@fortawesome/angular-fontawesome';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { delay } from \"rxjs/operators\";\r\nimport { VALUES } from '../shared/constants/global.values';\r\nimport { ICONS } from '../shared/constants/icons';\r\nimport { AudioEnum } from '../shared/enums/audio.enum';\r\nimport { Card } from '../shared/model/card';\r\nimport { CardImage } from '../shared/model/card-image.model';\r\nimport { GameConfig } from '../shared/model/game-config.model';\r\nimport { ArrayUtil } from '../shared/util/array.util';\r\nimport { AudioService } from './audio.service';\r\nimport { CardPositionIdTypeEnum } from '../shared/enums/card-position-id-type.enum';\r\n\r\nconst IMG_FILENAME_SEP = '_';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GameService {\r\n\r\n    private _gameConfig: GameConfig;\r\n    private _pairCount: number = 0;\r\n    private _coverCards = new BehaviorSubject<Card[]>([]);\r\n    private _selectedCard1: Card = null;\r\n    private _selectedCard2: Card = null;\r\n\r\n    constructor(\r\n        library: FaIconLibrary,\r\n        private router: Router,\r\n        private audioService: AudioService,\r\n    ) {\r\n        library.addIcons(...ICONS);\r\n    }\r\n\r\n    get config() {\r\n        return this._gameConfig;\r\n    }\r\n\r\n    get isGameFinished() {\r\n        return this._pairCount == 0;\r\n    }\r\n\r\n    goHome() {\r\n        this.router.navigate(['']);\r\n    }\r\n\r\n    create(gameConfig: GameConfig) {\r\n        this._gameConfig = gameConfig;\r\n        this.audioService.load();\r\n        this.router.navigate(['game']);\r\n    }\r\n\r\n    getCards(): Card[] {\r\n        if (!this._gameConfig) {\r\n            this.goHome();\r\n            return [];\r\n        }\r\n\r\n        this._pairCount = this._gameConfig.numPairs;\r\n\r\n        if (!this._gameConfig.singleImgPerPair) {\r\n            return this._getCardsForDifferentImagesPerPair();\r\n        }\r\n        return this._getCardsForSameImagePerPair();\r\n    }\r\n\r\n    private _getCardsForSameImagePerPair(): Card[] {\r\n        let cards = this._gameConfig.cardImages.map((img, i) => new Card(`${i + 1}`, img));\r\n\r\n        return this._getFinalShuffledCardsWithId([\r\n            ...this._shuffleCards(cards),\r\n            ...this._shuffleCards(JSON.parse(JSON.stringify(cards)))\r\n        ]);\r\n    }\r\n\r\n    private _getFinalShuffledCardsWithId(cards: Card[]) {\r\n        cards.forEach((card, i) => card.id = i + 1);\r\n\r\n        if (this._gameConfig.cardPositionIdType === CardPositionIdTypeEnum.IMAGES) {\r\n            cards.forEach((card, i) => card.icon = ICONS[i]);\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private _getCardsForDifferentImagesPerPair(): Card[] {\r\n        // Espera-se que as imagens dos mesmos pares tenham o nome com o mesmo prefixo antes do SEP\r\n        let cardImages = this._gameConfig.cardImages;\r\n        let keys = this._getFilenamePrefixForDiffImagesPerPair(cardImages);\r\n        let cards: Card[] = [];\r\n\r\n        keys.forEach(key => {\r\n            cardImages\r\n                .filter(img => this._getCardImageFilenamePrefix(img) === key)\r\n                .forEach(img => cards.push(new Card(key, img)));\r\n        });\r\n\r\n        return this._getFinalShuffledCardsWithId(this._shuffleCards(cards));\r\n    }\r\n\r\n    private _getFilenamePrefixForDiffImagesPerPair(cardImages: CardImage[]) {\r\n        let filenames = cardImages.map(img => this._getCardImageFilenamePrefix(img));\r\n        let occurrences = ArrayUtil.getNumOccurrences(filenames);\r\n        let keys = Object.keys(occurrences);\r\n\r\n        if (keys.length !== filenames.length / 2 ||\r\n            Object.values(occurrences).some(count => count != 2)\r\n        ) {\r\n            throw new Error('Em caso de imagens diferentes por par, os nomes dos arquivos devem seguir o padrão informado');\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    private _getCardImageFilenamePrefix(cardImage: CardImage) {\r\n        return cardImage.filename.split(IMG_FILENAME_SEP)[0];\r\n    }\r\n\r\n    private _shuffleCards(cards: Card[]) {\r\n        for (let index = 0; index < cards.length; index++) {\r\n            const temp = cards[index];\r\n            const newIdx = Math.floor(Math.random() * cards.length);\r\n            cards[index] = cards[newIdx];\r\n            cards[newIdx] = temp;\r\n        }\r\n        return cards;\r\n    }\r\n\r\n    onChooseCard(choosen: Card): boolean {\r\n        if (this.isGameFinished) {\r\n            return;\r\n        }\r\n\r\n        this.audioService.play(AudioEnum.TURN_CARD);\r\n\r\n        if (this._selectedCard1 === null) {\r\n            this._selectedCard1 = choosen;\r\n            return;\r\n        }\r\n\r\n        if (choosen.id === this._selectedCard1.id) {\r\n            return;\r\n        }\r\n\r\n        this._selectedCard2 = choosen;\r\n        if (this._selectedCard1.code == this._selectedCard2.code) {\r\n            this._pairCount--;\r\n            setTimeout(() => {\r\n                this.audioService.play(AudioEnum.CORRECT);\r\n            }, 100);\r\n        }\r\n        else {\r\n            this._coverCards.next([this._selectedCard1, this._selectedCard2]);\r\n        }\r\n\r\n        this._selectedCard1 = null;\r\n        this._selectedCard2 = null;\r\n\r\n        let win = this.isGameFinished;\r\n\r\n        setTimeout(() => {\r\n            if (win) {\r\n                this.audioService.play(AudioEnum.WIN);\r\n            }\r\n        }, VALUES.winNotificationTimeout / 2);\r\n\r\n        return win;\r\n    }\r\n\r\n    getCoveredCards() {\r\n        return this._coverCards.asObservable().pipe(delay(1200));\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n\r\n    success(message: string, milliseconds = 5000) {\r\n        this._showToast(message, 'success', '#51A351', milliseconds);\r\n    }\r\n\r\n    error(message: string, milliseconds = 5000) {\r\n        this._showToast(message, 'error', '#BD362F', milliseconds);\r\n    }\r\n\r\n    info(message: string, milliseconds: number = 5000) {\r\n        this._showToast(message, 'info', '#389BB7', milliseconds);\r\n    }\r\n\r\n    warning(message: string, milliseconds = 5000) {\r\n        this._showToast(message, 'warning', '#F89406', milliseconds);\r\n    }\r\n\r\n    close() {\r\n        Swal.close();\r\n    }\r\n\r\n    showing() {\r\n        return Swal.isVisible();\r\n    }\r\n\r\n    private _showToast(message: string, type: SweetAlertIcon, backgroundColor: string, milliseconds: number) {\r\n        Swal.mixin({\r\n            toast: true,\r\n            position: 'top',\r\n            timer: milliseconds,\r\n            showConfirmButton: false,\r\n            showCloseButton: !milliseconds,\r\n            customClass : {\r\n                title: 'custom-toast-title'\r\n            },\r\n            background: backgroundColor,\r\n        })\r\n        .fire(message, '', type);\r\n    }\r\n\r\n    showInvalidFormError() {\r\n        this.error('Preencha todos os campos obrigatórios');\r\n    }\r\n    \r\n}\r\n","export class ConfirmationDialogData {\r\n    header: DialogHeader;\r\n    bodyText: string;\r\n    okCallback: Function;\r\n}\r\n\r\nexport class DialogHeader {\r\n    icon: string;\r\n    iconColor: string;\r\n    title: string;\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmationDialogData } from './confirmation-dialog-data';\r\n\r\n@Component({\r\n    selector: 'app-confirmation-dialog',\r\n    templateUrl: './confirmation-dialog.component.html',\r\n    styleUrls: ['./confirmation-dialog.component.scss']\r\n})\r\nexport class ConfirmationDialogComponent {\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: ConfirmationDialogData\r\n    ) { }\r\n\r\n}\r\n","<div class=\"dialog-header\">\r\n    <mat-icon [style.color]=\"data.header.iconColor\">{{ data.header.icon }}</mat-icon>\r\n    <div mat-dialog-title>{{ data.header.title }}</div>\r\n</div>\r\n\r\n<div mat-dialog-content>\r\n    <div class=\"text-center mb-2\">\r\n        {{ data.bodyText }}\r\n    </div>\r\n</div>\r\n\r\n<div mat-dialog-actions>\r\n    <button mat-stroked-button mat-dialog-close id=\"modal-cancel-btn\" color=\"primary\">\r\n        <mat-icon>thumb_down</mat-icon> Não\r\n    </button>\r\n\r\n    <button mat-raised-button mat-dialog-close=\"ok\" id=\"modal-ok-btn\" color=\"primary\">\r\n        <mat-icon>thumb_up</mat-icon> Sim\r\n    </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from 'src/app/material.module';\nimport { ConfirmationDialogComponent } from './confirmation-dialog/confirmation-dialog.component';\n\n@NgModule({\n    declarations: [\n        ConfirmationDialogComponent,\n    ],\n    imports: [\n        CommonModule,\n        MaterialModule,\n    ]\n})\nexport class DialogModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-abstract-input',\r\n    template: '',\r\n    styleUrls: []\r\n})\r\nexport class AbstractInputComponent {\r\n\r\n    @Input() label: string;\r\n    @Input() labelComment: string;\r\n    @Input() form: FormGroup;\r\n    @Input() controlName: string;\r\n    @Input() flexDirectionRow = false;\r\n    @Input() disabled = false;\r\n\r\n    @Output() onChange = new EventEmitter<any>();\r\n    \r\n    protected _originalRequired: boolean;\r\n\r\n    protected _setOriginalRequired() {\r\n        this._originalRequired = this.isRequired;\r\n    }\r\n\r\n    protected checkForm() {\r\n        if(!this.form) {\r\n            this.controlName = 'model';\r\n\r\n            this.form = new FormGroup({\r\n                model: new FormControl()\r\n            });\r\n        }\r\n    }\r\n\r\n    get formControl() {\r\n        return this.form.controls[this.controlName];\r\n    }\r\n\r\n    get isRequired() {\r\n        return this.formControl?.hasError('required') || false;\r\n    }\r\n\r\n    get isInvalid() {\r\n        return this.hasError('invalid');\r\n    }\r\n\r\n    hasError(errorKey: string) {\r\n        let formControl = this.formControl;\r\n        return !this.isRequired && (formControl.invalid || formControl.hasError(errorKey));\r\n    }\r\n\r\n    get inputClass() {\r\n        return {\r\n            'd-flex-row': this.flexDirectionRow,\r\n            'd-flex-col': !this.flexDirectionRow,\r\n        }\r\n    }\r\n\r\n    get getSelectValue() {\r\n        try {\r\n            return this.formControl.value;\r\n        } \r\n        catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected _setAsInvalid() {\r\n        this._setFormControlAsInvalid(this.formControl);\r\n    }\r\n\r\n    protected _setFormControlAsInvalid(control: AbstractControl) {\r\n        control.setErrors({'invalid': true});\r\n        control.markAsTouched();\r\n    }\r\n\r\n    protected _setAsValidByOriginalRequired() {\r\n        if (!this._originalRequired) {\r\n            this._setAsValid();\r\n            return;\r\n        }\r\n\r\n        this._setAsRequired();\r\n    }\r\n\r\n    protected _setAsValid() {\r\n        this._setFormControlAsValid(this.formControl);\r\n    }\r\n\r\n    protected _setFormControlAsValid(control: AbstractControl) {\r\n        control.setErrors(null);\r\n        control.markAsTouched();\r\n    }\r\n\r\n    protected _setAsRequired(){\r\n        this._setFormControlAsRequired(this.formControl);\r\n    }\r\n\r\n    protected _setFormControlAsRequired(control: AbstractControl){\r\n        control.setErrors({'required': true});\r\n        control.markAsTouched();\r\n    }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-input-label',\r\n    templateUrl: './input-label.component.html',\r\n    styleUrls: ['./input-label.component.scss']\r\n})\r\nexport class InputLabelComponent {\r\n\r\n    @Input() label: string;\r\n    @Input() required = true;\r\n    @Input() comment: string;\r\n\r\n}\r\n","<mat-label>\r\n    {{ label }}\r\n    <span class=\"input-label-comment\" *ngIf=\"comment\">{{ comment }}</span>\r\n    <span class=\"input-label-required\"> {{ required ? '*' : '' }}</span>\r\n</mat-label>","import { Component, Input } from '@angular/core';\r\nimport { AbstractInputComponent } from '../abstract-input.component';\r\n\r\n@Component({\r\n    selector: 'app-input-number',\r\n    templateUrl: './input-number.component.html',\r\n    styleUrls: [\r\n        './input-number.component.scss',\r\n        '../abstract-input.component.scss'\r\n    ]\r\n})\r\nexport class InputNumberComponent extends AbstractInputComponent {\r\n\r\n    @Input() min: number = null;\r\n    @Input() max: number = null;\r\n\r\n    sendValueChange($event: any) {\r\n        let value: number = $event?.target?.valueAsNumber;\r\n        if(isNaN(value)) {\r\n            value = null;\r\n        }\r\n        this.onChange.emit(value);\r\n    }\r\n\r\n}\r\n","<div id=\"{{controlName}}-div\" [ngClass]=\"inputClass\">\r\n    <app-input-label *ngIf=\"label\" [label]=\"label\" [comment]=\"labelComment\" [required]=\"isRequired\"></app-input-label>\r\n\r\n    <mat-form-field appearance=\"outline\" class=\"w-100 mat-form-field-label-out\" floatLabel=\"never\" color=\"primary\">\r\n        <input matInput \r\n            type=\"number\" \r\n            [formControl]=\"formControl\" \r\n            (change)=\"sendValueChange($event)\" \r\n            [min]=\"min\"\r\n            [max]=\"max\"\r\n        >\r\n    \r\n        <mat-error *ngIf=\"isRequired\">\r\n            <mat-icon aria-hidden=\"false\">cancel</mat-icon>\r\n            Campo <strong>obrigatório</strong>\r\n        </mat-error>\r\n        <mat-error *ngIf=\"min!=null && formControl.hasError('min')\">\r\n            <mat-icon aria-hidden=\"false\">cancel</mat-icon>\r\n            Valor mínimo é <strong>{{ min }}</strong>\r\n        </mat-error>\r\n        <mat-error *ngIf=\"max!=null && formControl.hasError('max')\">\r\n            <mat-icon aria-hidden=\"false\">cancel</mat-icon>\r\n            Valor máximo é <strong>{{ max }}</strong>\r\n        </mat-error>\r\n        <mat-error *ngIf=\"min==null && max==null && isInvalid\">\r\n            <mat-icon aria-label=\"false\">cancel</mat-icon>\r\n            Valor inserido <strong>inválido</strong>\r\n        </mat-error>\r\n    </mat-form-field>\r\n</div>","import { Component, Input } from '@angular/core';\r\nimport { AbstractInputComponent } from '../abstract-input.component';\r\n\r\n@Component({\r\n    selector: 'app-input-text',\r\n    templateUrl: './input-text.component.html',\r\n    styleUrls: [\r\n        './input-text.component.scss',\r\n        '../abstract-input.component.scss'\r\n    ]\r\n})\r\nexport class InputTextComponent extends AbstractInputComponent {\r\n\r\n    @Input() placeholder = '';\r\n    @Input() minLength: number;\r\n    @Input() maxLength = 100;\r\n    @Input() title = '';\r\n    \r\n    clear() {\r\n        this.formControl.setValue(null);\r\n    }\r\n\r\n    sendChangeEvent($event) {\r\n        if($event || !$event.target) {\r\n            return;\r\n        }\r\n\r\n        this.onChange.emit($event.target.value);\r\n    }\r\n\r\n    protected _eventTypeDeleteContent($event: any) {\r\n        return $event?.inputType === 'deleteContentBackward';\r\n    }\r\n\r\n}\r\n","<div id=\"{{controlName}}-div\" [ngClass]=\"inputClass\">\r\n    <app-input-label [label]=\"label\" [comment]=\"labelComment\" [required]=\"isRequired\"></app-input-label>\r\n\r\n    <mat-form-field appearance=\"outline\" class=\"w-100 mat-form-field-label-out\" floatLabel=\"never\" color=\"primary\">\r\n        <input matInput\r\n            type=\"text\"\r\n            [formControl]=\"formControl\"\r\n            [id]=\"controlName\"\r\n            [name]=\"controlName\"\r\n            [minLength]=\"minLength\"\r\n            [maxLength]=\"maxLength\"\r\n            [title]=\"title\"\r\n            [placeholder]=\"placeholder\"\r\n            [readonly]=\"disabled\"\r\n            (change)=\"sendChangeEvent($event)\"\r\n        >\r\n\r\n        <mat-error *ngIf=\"isRequired\">\r\n            <mat-icon aria-label=\"false\">cancel</mat-icon>\r\n            Campo <strong>obrigatório</strong>\r\n        </mat-error>\r\n\r\n        <mat-error *ngIf=\"isInvalid\">\r\n            <mat-icon aria-label=\"false\">cancel</mat-icon>\r\n            Valor inserido <strong>inválido</strong>\r\n        </mat-error>\r\n\r\n        <mat-error *ngIf=\"hasError('minLength')\">\r\n            <mat-icon aria-label=\"false\">cancel</mat-icon>\r\n            Tamanho mínimo: <strong>{{ minLength }}</strong> caracteres\r\n        </mat-error>\r\n    </mat-form-field>\r\n</div>","import { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputLabelComponent } from './input-label/input-label.component';\nimport { MaterialModule } from 'src/app/material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { InputNumberComponent } from './input-number/input-number.component';\nimport { InputTextComponent } from './input-text/input-text.component';\nimport { SelectComponent } from './select/select.component';\nimport { UploadImageComponent } from './upload-image/upload-image.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MaterialModule,\n    ],\n    declarations: [\n        InputLabelComponent,\n        InputNumberComponent,\n        InputTextComponent,\n        SelectComponent,\n        UploadImageComponent,\n    ],\n    exports: [\n        InputNumberComponent,\n        InputTextComponent,\n        SelectComponent,\n        UploadImageComponent,\n    ],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class InputModule { }\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { AbstractInputComponent } from '../abstract-input.component';\r\n\r\n\r\n@Component({\r\n    selector: 'app-select',\r\n    templateUrl: './select.component.html',\r\n    styleUrls: ['./select.component.scss']\r\n})\r\nexport class SelectComponent extends AbstractInputComponent implements OnInit, OnChanges {\r\n\r\n    readonly ALL_OPTION = 'all';\r\n    \r\n    @Input() options: any[] = [];\r\n    @Input() valueAttribute: string = 'id';\r\n    @Input() labelAttribute: string = 'label';\r\n    @Input() multiple = false;\r\n    @Input() allOptionLabel: string;\r\n    @Input() useFullOptionAsValue = false;\r\n\r\n    @Output() onFinishedLoading = new EventEmitter<boolean>();\r\n\r\n    showLoadingOptionsError: boolean = false;\r\n\r\n    @ViewChild('allOption') \r\n    private _allOption: MatOption;\r\n    \r\n    private _allSelected = false;\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.showLoadingOptionsError = false;\r\n        this.checkForm();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.options && changes.options.currentValue == null) {\r\n            this.showLoadingOptionsError = true;\r\n        }\r\n    }\r\n\r\n    getOptionValue(option: any): any {\r\n        if (this.useFullOptionAsValue) {\r\n            return option;\r\n        }\r\n        return option[this.valueAttribute];\r\n    }\r\n\r\n    onChangeSelection($eventValue: any) {\r\n        if (this.allOptionLabel && this.multiple) {\r\n            this._onChangeSelectionMultiple($eventValue);\r\n        }\r\n\r\n        this.onChange.emit($eventValue);\r\n    }\r\n\r\n    private _onChangeSelectionMultiple($eventValue: any[]) {\r\n        if (this._allSelected) {\r\n            this.formControl.setValue([]);\r\n            this._allSelected = false;\r\n            return;\r\n        }\r\n\r\n        this._allSelected = $eventValue.includes(this.ALL_OPTION) || \r\n            $eventValue.length == this.options.length;\r\n\r\n        if (this._allSelected) {\r\n            this.formControl.setValue(\r\n                this.options.map(option => option[this.valueAttribute])\r\n            );\r\n        }\r\n    }\r\n\r\n    get allOptionSelected() {\r\n        return this._allOption?.selected || false;\r\n    }\r\n\r\n}\r\n","<div id=\"{{controlName}}-div\" [ngClass]=\"inputClass\">\r\n    <app-input-label [label]=\"label\" [comment]=\"labelComment\" [required]=\"isRequired\"></app-input-label>\r\n\r\n    <mat-form-field appearance=\"outline\" class=\"w-100 mat-form-field-label-out\" floatLabel=\"never\" color=\"primary\">\r\n        <mat-select [formControl]=\"formControl\" [multiple]=\"multiple\" \r\n            (selectionChange)=\"onChangeSelection($event.value)\">\r\n\r\n            <mat-option #allOption *ngIf=\"allOptionLabel\" [value]=\"ALL_OPTION\">\r\n                {{ allOptionLabel }}\r\n            </mat-option>\r\n\r\n            <mat-option *ngFor=\"let option of options\" [value]=\"getOptionValue(option)\" \r\n                [disabled]=\"multiple && allOptionSelected\">\r\n                {{ option[labelAttribute] }}\r\n            </mat-option>\r\n        </mat-select>\r\n\r\n        <mat-error *ngIf=\"isRequired\">\r\n            <mat-icon aria-label=\"false\">cancel</mat-icon>\r\n            Campo <strong>obrigatório</strong>\r\n        </mat-error>\r\n    </mat-form-field>\r\n</div>\r\n\r\n<div *ngIf=\"showLoadingOptionsError\" class=\"loading-options-error\">\r\n    <mat-icon aria-label=\"false\">cancel</mat-icon>\r\n    Erro ao buscar opções para {{ label }}\r\n</div>","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { AbstractInputComponent } from '../abstract-input.component';\nimport { ToastService } from 'src/app/services/toast.service';\nimport { CardImage } from 'src/app/shared/model/card-image.model';\n\n@Component({\n    selector: 'app-upload-image',\n    templateUrl: './upload-image.component.html',\n    styleUrls: ['./upload-image.component.scss']\n})\nexport class UploadImageComponent extends AbstractInputComponent {\n\n    readonly ACCEPT_IMG = [ 'image/png', 'image/jpeg' ];\n\n    @Input() multiple: boolean = false;\n    @Input() selectAllDir: boolean = false;\n\n    @ViewChild('uploadInput') private _inputElem: ElementRef;\n    private _numFiles: number = 0;\n    private _images: CardImage[];\n\n    constructor(\n        private toastService: ToastService\n    ) {\n        super();\n    }\n\n\n    onSelectFiles($event: any) {\n        this._images = [];\n        let { files, allOk } = this._extractFiles($event?.target?.files);\n\n        if (!allOk) {\n            this._inputElem.nativeElement.value = \"\";\n            const accept = this.ACCEPT_IMG.map(x => x.replace('image/', '')).join(', ');\n            this.toastService.error(`Pelo menos 1 arquivo selecionado está fora dos formatos de imagem aceitos: ${accept}. Tente novamente!`);\n            return;\n        }\n\n        files.forEach(file => this._readFile(file));\n    }\n\n    private _extractFiles(fileList: FileList) {\n        this._numFiles = fileList?.length ?? 0;\n\n        let files: File[] = [];\n        let allOk = true;\n        let i = 0;\n        do {\n            let file = fileList.item(i++);\n            files.push(file);\n            allOk = allOk && this.ACCEPT_IMG.includes(file.type);\n        } while (allOk && i < this._numFiles);\n        \n        return {\n            files: files, \n            allOk: allOk\n        };\n    }\n\n    private _readFile(file: File) {\n        const reader = new FileReader();\n        reader.onload = (fileReaderEvent: any) => {\n            this._images.push(new CardImage(fileReaderEvent.target.result, file.name));\n            if (this._images.length == this._numFiles) {\n                this.formControl.setValue(this._images);\n            }\n        }\n        reader.readAsDataURL(file);\n    }\n\n}\n","<div class=\"input-file\">\n    <app-input-label *ngIf=\"label\" [label]=\"label\" [comment]=\"labelComment\" [required]=\"isRequired\"></app-input-label>\n\n    <div *ngIf=\"selectAllDir else regularInput\" >\n        <input type=\"file\" #uploadInput (change)=\"onSelectFiles($event)\" [accept]=\"ACCEPT_IMG\" multiple webkitdirectory>\n    </div>\n    <ng-template #regularInput>\n        <input type=\"file\" #uploadInput (change)=\"onSelectFiles($event)\" [accept]=\"ACCEPT_IMG\" [multiple]=\"multiple\">\n    </ng-template>\n</div>","export const VALUES = {\r\n    winNotificationTimeout: 500,\r\n}\r\n","import {\r\n    faApple,\r\n    faEvernote,\r\n    faGulp,\r\n    faRedhat,\r\n    faTwitter\r\n} from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n    faBug,\r\n    faCar,\r\n    faCircle,\r\n    faCloud,\r\n    faFutbol,\r\n    faGhost,\r\n    faHandPaper,\r\n    faHeart,\r\n    faHippo,\r\n    faMoon,\r\n    faPlane,\r\n    faRocket,\r\n    faSquareFull,\r\n    faSun,\r\n    faTree,\r\n    faTruckMonster\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const ICONS = [\r\n    faSun,\r\n    faCloud,\r\n    faMoon,\r\n    faHeart,\r\n    faCircle,\r\n    faSquareFull,\r\n    faApple,\r\n    faBug,\r\n    faTwitter,\r\n    faHippo,\r\n    faTree,\r\n    faCar,\r\n    faTruckMonster,\r\n    faPlane,\r\n    faRocket,\r\n    faFutbol,\r\n    faHandPaper,\r\n    faGhost,\r\n    faGulp,\r\n    faEvernote,\r\n    faRedhat,\r\n];\r\n","export enum AudioEnum {\r\n    CORRECT,\r\n    TURN_CARD,\r\n    WIN\r\n}\r\n","export enum CardPositionIdTypeEnum {\r\n    NUMBERS = 1,\r\n    IMAGES,\r\n    ROW_COLUMN\r\n}\r\n","export class CardImage {\r\n    constructor(\r\n        public base64: string,\r\n        public filename?: string\r\n    ) {}\r\n}\r\n","import { CardImage } from \"./card-image.model\";\n\nexport class Card {\n    id: number;\n    icon?: any;\n\n    constructor(\n        public code: string,\n        public img?: CardImage\n    ) {}\n}\n","import { CardPositionIdTypeEnum } from \"../enums/card-position-id-type.enum\";\r\nimport { CardImage } from \"./card-image.model\";\r\n\r\nexport class GameConfig {\r\n\r\n    title: string;\r\n    backgroundImgSrc?: string;\r\n    singleImgPerPair: boolean;\r\n    cardImages: CardImage[];\r\n    cardPositionIdType: CardPositionIdTypeEnum;\r\n\r\n    get numPairs(): number {\r\n        let numPairImages = this.cardImages.length;\r\n        if (!this.singleImgPerPair) {\r\n            numPairImages /= 2;\r\n        }\r\n        return numPairImages;\r\n    }\r\n\r\n}\r\n","export class ArrayUtil {\r\n\r\n    static equals<T>(arr1: T[], arr2: T[]): boolean {\r\n        return (\r\n            arr1.length === arr2.length &&\r\n            arr1.every(x => arr2.includes(x)) &&\r\n            arr2.every(x => arr1.includes(x))\r\n        );\r\n    }\r\n\r\n    static getNumOccurrences<T>(arr: T[]): any { /* keys: elements, values: num occurrences */\r\n        return arr.reduce(function (acc: any, curr) {\r\n            return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc\r\n        }, {});\r\n    }\r\n    \r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { MaterialModule } from 'src/app/material.module';\r\nimport { DialogModule } from 'src/app/shared/components/dialog/dialog.module';\r\nimport { GameComponent } from './game/game.component';\r\nimport { MemoryCardComponent } from './memory-card/memory-card.component';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: GameComponent\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(routes),\r\n        FontAwesomeModule,\r\n        MaterialModule,\r\n        DialogModule,\r\n    ],\r\n    declarations: [\r\n        GameComponent,\r\n        MemoryCardComponent,\r\n        NavbarComponent\r\n    ],\r\n})\r\nexport class GameModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\nimport { GameService } from 'src/app/services/game.service';\r\nimport { ToastService } from 'src/app/services/toast.service';\r\nimport { VALUES } from 'src/app/shared/constants/global.values';\r\nimport { CardPositionIdTypeEnum } from 'src/app/shared/enums/card-position-id-type.enum';\r\nimport { Card } from 'src/app/shared/model/card';\r\n\r\n@Component({\r\n    selector: 'app-game',\r\n    templateUrl: './game.component.html',\r\n    styleUrls: ['./game.component.scss']\r\n})\r\nexport class GameComponent implements OnInit {\r\n\r\n    title: string;\r\n    backgroundStyle: any = '';\r\n    cardRows: Card[][] = [];\r\n    grid: any;\r\n\r\n    private _boardDim: BoardDim;\r\n\r\n    constructor(\r\n        private gameService: GameService,\r\n        private dialogService: DialogService,\r\n        private toastService: ToastService,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        let gameConfig = this.gameService.config;\r\n        if (!gameConfig) {\r\n            this._goHome();\r\n            return;\r\n        }\r\n\r\n        this.title = gameConfig.title.toUpperCase();\r\n        if (gameConfig.backgroundImgSrc) {\r\n            this.backgroundStyle = `url(${gameConfig.backgroundImgSrc})`;\r\n        }\r\n        this._setBoardDim(gameConfig.numPairs * 2);\r\n        this._startNewGame();\r\n    }\r\n\r\n    private _goHome() {\r\n        this.gameService.goHome();\r\n    }\r\n\r\n    private _setBoardDim(numCards: number) {\r\n        let numCols = (numCards % 5 == 0 ? 5 : 4);\r\n        let numRows = numCards / numCols\r\n        this._boardDim = new BoardDim(numRows, numCols);\r\n\r\n        if (this.gameService.config.cardPositionIdType == CardPositionIdTypeEnum.ROW_COLUMN) {\r\n            this.grid = {\r\n                rows:    [...Array(numRows).keys()].map(r => String.fromCharCode('A'.charCodeAt(0) + r)),\r\n                columns: [...Array(numCols).keys()].map(c => c+1)\r\n            }\r\n        }\r\n    }\r\n\r\n    private _startNewGame() {\r\n        this.cardRows = [];\r\n        let cards: Card[] = [];\r\n        try {\r\n            cards = this.gameService.getCards();\r\n        } catch (error) {\r\n            this.toastService.error(error?.message || 'Ops!');\r\n            return this._goHome();\r\n        }\r\n\r\n        const numCols = this._boardDim.numCols;\r\n        for (let r = 0; r < this._boardDim.numRows; r++) {\r\n            let idx = r*numCols;\r\n            this.cardRows.push(cards.slice(idx, idx+numCols));\r\n        }\r\n\r\n        this._printPairs();//.\r\n    }\r\n\r\n    // TODO remover\r\n    private _printPairs() {\r\n        let numCards = this.cardRows.length;\r\n        if (!numCards) {\r\n            return;\r\n        }\r\n\r\n        let indices: number[] = [];\r\n        let pairs: number[][] = [];\r\n\r\n        let cards: Card[] = [];\r\n        this.cardRows.forEach(rowCards => cards.push(...rowCards));\r\n\r\n        cards.forEach( (card, i) => {\r\n            if (indices.includes(i)) {\r\n                return;\r\n            }\r\n            let j = cards.findIndex((c,j) => c.code === card.code && j != i);\r\n            indices.push(...[i,j]);\r\n            pairs.push([i+1, j+1]);\r\n        })\r\n\r\n        console.log('pairs', pairs);\r\n    }\r\n\r\n\r\n    newGame() {\r\n        this._checkGameFinishedAndDoIt(\r\n            'Tem certeza que deseja iniciar novo jogo?',\r\n            () => this._startNewGame()\r\n        );\r\n    }\r\n\r\n    goHome() {\r\n        this._checkGameFinishedAndDoIt(\r\n            'Tem certeza que deseja sair do jogo?', \r\n            () => this._goHome()\r\n        );\r\n    }\r\n\r\n    private _checkGameFinishedAndDoIt(confirmQuestion: string, callback: Function) {\r\n        if (!this.gameService.isGameFinished) {\r\n            this._openConfirmationDialog(confirmQuestion, callback);\r\n            return;\r\n        }\r\n\r\n        callback();\r\n    }\r\n\r\n    private _openConfirmationDialog(confirmQuestion: string, callback: Function) {\r\n        this.dialogService.openConfirmationDialog({\r\n            header: {\r\n                icon: 'pan_tool',\r\n                iconColor: 'darkorange',\r\n                title: 'Espere! O jogo ainda não acabou!'\r\n            },\r\n            bodyText: confirmQuestion,\r\n            okCallback: callback\r\n        });\r\n    }\r\n\r\n    onChooseCard($card: Card) {\r\n        let win = this.gameService.onChooseCard($card);\r\n        if (win) {\r\n            setTimeout(() => {\r\n                this._openNewGameDialog();\r\n            }, VALUES.winNotificationTimeout);\r\n        }\r\n    }\r\n\r\n    private _openNewGameDialog() {\r\n        this.dialogService.openConfirmationDialog({\r\n            header: {\r\n                icon: 'mood',\r\n                iconColor: 'limegreen',\r\n                title: 'Parabéns!'\r\n            },\r\n            bodyText: 'Deseja jogar novamente?',\r\n            okCallback: () => this._startNewGame()\r\n        });\r\n    }\r\n\r\n}\r\n\r\nclass BoardDim {\r\n    constructor(\r\n        public numRows: number,\r\n        public numCols: number,\r\n    ) {}\r\n}\r\n","<app-navbar [parent]=\"this\"></app-navbar>\r\n\r\n<div class=\"board-background\" [style.background-image]=\"backgroundStyle\">\r\n    <div>\r\n        <div class=\"board\">\r\n            <div class=\"board-row\" *ngIf=\"grid\">\r\n                <div class=\"board-grid-space\"></div>\r\n                <div class=\"board-grid-header board-grid-col\" *ngFor=\"let col of grid.columns\">\r\n                    {{ col }}\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"board-row\" *ngFor=\"let cardRow of cardRows; let r=index\">\r\n                <div *ngIf=\"grid\">\r\n                    <div class=\"board-grid-header board-grid-row\">\r\n                        {{ grid.rows[r] }}\r\n                    </div>\r\n                </div>\r\n\r\n                <app-memory-card *ngFor=\"let card of cardRow\" [card]=\"card\" (onSelect)=\"onChooseCard($event)\">\r\n                </app-memory-card>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { GameService } from 'src/app/services/game.service';\nimport { CardPositionIdTypeEnum } from 'src/app/shared/enums/card-position-id-type.enum';\nimport { Card } from 'src/app/shared/model/card';\n\n@Component({\n    selector: 'app-memory-card',\n    templateUrl: './memory-card.component.html',\n    styleUrls: ['./memory-card.component.scss']\n})\nexport class MemoryCardComponent implements OnInit {\n\n    readonly FRONT_ID_TYPE = CardPositionIdTypeEnum;\n\n    @Input() card!: Card;\n\n    @Output() onSelect = new EventEmitter<Card>();\n\n    frontIdType: CardPositionIdTypeEnum;\n\n    private _isRotated: boolean;\n\n    constructor(private gameService: GameService) { }\n\n    get isRotated(): boolean {\n\t\treturn this._isRotated;\n\t}\n\n    ngOnInit(): void {\n        this.frontIdType = this.gameService.config.cardPositionIdType;\n        this.gameService.getCoveredCards().subscribe(coveredCards => \n            coveredCards.map(card => this._isRotated = (card.id == this.card.id) ? false : this._isRotated)\n        );\n    }\n\n    onClick() {\n        this._isRotated = true;\n        this.onSelect.emit(this.card);\n    }\n\n}\n","<div class=\"card\" [ngClass]=\"{rotated: isRotated}\" (click)=\"onClick()\">\r\n    <div class=\"card-inner\">\r\n        <div  class=\"front\">\r\n            <img *ngIf=\"card.img\" [src]=\"card.img.base64\" alt=\"card\">\r\n        </div>\r\n\r\n        <div class=\"back bg-primary-2\">\r\n            <div [ngSwitch]=\"frontIdType\">\r\n                <div *ngSwitchCase=\"FRONT_ID_TYPE.NUMBERS\" class=\"card-id-number quicksand\">{{ card.id }}</div>\r\n                \r\n                <fa-icon *ngSwitchCase=\"FRONT_ID_TYPE.IMAGES\" [icon]=\"card.icon\" size=\"3x\"></fa-icon>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, Input } from '@angular/core';\r\nimport { GameComponent } from '../game/game.component';\r\n\r\n@Component({\r\n    selector: 'app-navbar',\r\n    templateUrl: './navbar.component.html',\r\n    styleUrls: []\r\n})\r\nexport class NavbarComponent {\r\n\r\n    @Input() parent: GameComponent;\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row>\r\n        <button mat-icon-button aria-label=\"Home\" matTooltip=\"Home\" (click)=\"parent.goHome()\">\r\n            <mat-icon>home</mat-icon>\r\n        </button>\r\n\r\n        <span class=\"title\">{{ parent.title }}</span>\r\n\r\n        <button mat-icon-button aria-label=\"New Game\" matTooltip=\"New Game\" (click)=\"parent.newGame()\">\r\n            <mat-icon>refresh</mat-icon>\r\n        </button>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { GameService } from 'src/app/services/game.service';\r\nimport { ToastService } from 'src/app/services/toast.service';\r\nimport { CardPositionIdTypeEnum } from 'src/app/shared/enums/card-position-id-type.enum';\r\nimport { GameConfig } from 'src/app/shared/model/game-config.model';\r\n\r\nenum InputTypeEnum {\r\n    MANUALLY = 1,\r\n    CONFIG_FILE = 2\r\n}\r\n\r\n@Component({\r\n    selector: 'app-game-config-form',\r\n    templateUrl: './game-config-form.component.html',\r\n    styleUrls: ['./game-config-form.component.scss']\r\n})\r\nexport class GameConfigFormComponent implements OnInit {\r\n\r\n    readonly INPUT_TYPE = InputTypeEnum;\r\n    readonly ACCEPT_IMG = [ 'image/png', 'image/jpeg' ];\r\n\r\n    form: FormGroup;\r\n    inputType = InputTypeEnum.MANUALLY;\r\n    numImagesPerPairOptions: any[] = [];\r\n    cardPositionOptions: any[] = [];\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private gameService: GameService,\r\n        private toastService: ToastService,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.onChangeInputType();\r\n    }\r\n\r\n    onChangeInputType() {\r\n        if (this.inputType == InputTypeEnum.CONFIG_FILE) {\r\n            this.form = this.fb.group({});\r\n            return;\r\n        }\r\n        \r\n        this._initForm();\r\n        this._setOptions();\r\n    }\r\n\r\n    private _initForm() {\r\n        this.form = this.fb.group({\r\n            title: new FormControl('Memory Game', Validators.required),\r\n            backgroundImgSrc: new FormControl(null),\r\n            singleImgPerPair: new FormControl(null, Validators.required),\r\n            cardImages: new FormControl(null, Validators.required),\r\n            cardPositionIdType: new FormControl(CardPositionIdTypeEnum.NUMBERS, Validators.required),\r\n        });\r\n    }\r\n\r\n    private _setOptions() {\r\n        this.cardPositionOptions = [\r\n            { id: CardPositionIdTypeEnum.NUMBERS, label: 'Números' },\r\n            { id: CardPositionIdTypeEnum.IMAGES, label: 'Imagens' },\r\n            { id: CardPositionIdTypeEnum.ROW_COLUMN, label: 'Linhas e colunas (Batalha Naval)' },\r\n        ]\r\n\r\n        this.numImagesPerPairOptions = [\r\n            { id: true, label: 'Sim' },\r\n            { id: false, label: 'Não' },\r\n        ]\r\n    }\r\n\r\n    onSelectConfigFile($event: any) {\r\n        let file: File = $event?.target?.files[0];\r\n        // TODO\r\n        debugger\r\n    }\r\n\r\n    submit() {\r\n        this.form.markAllAsTouched();\r\n        if (this.form.invalid) {\r\n            return this.toastService.showInvalidFormError();\r\n        }\r\n        this.gameService.create(Object.assign(new GameConfig(), this.form.value));\r\n    }\r\n\r\n}\r\n","<div>\r\n    <mat-label>Selecione como deseja inserir as informações para o jogo:</mat-label>\r\n\r\n    <div class=\"form-line mt-2 ms-4\">\r\n        <mat-radio-group aria-label=\"label\" [(ngModel)]=\"inputType\" (change)=\"onChangeInputType()\">\r\n            <mat-radio-button [value]=\"INPUT_TYPE.MANUALLY\" color=\"primary\">Inserir manualmente</mat-radio-button>\r\n            <mat-radio-button [value]=\"INPUT_TYPE.CONFIG_FILE\" color=\"primary\">Inserir arquivo de configuração</mat-radio-button>\r\n        </mat-radio-group>\r\n    </div>\r\n</div>\r\n\r\n<div [ngSwitch]=\"inputType\" class=\"mt-4\">\r\n    <div *ngSwitchCase=\"INPUT_TYPE.MANUALLY\">\r\n        <form *ngIf=\"form\" [formGroup]=\"form\">\r\n            <div class=\"form-line\">\r\n                <app-input-text label=\"Título\" [form]=\"form\" controlName=\"title\"></app-input-text>\r\n                <app-upload-image label=\"Imagem de fundo\" [form]=\"form\" controlName=\"backgroundImgSrc\"></app-upload-image>\r\n            </div>\r\n\r\n            <div class=\"form-line\">\r\n                <app-select label=\"Cada par possui imagens iguais?\" \r\n                    [form]=\"form\" controlName=\"singleImgPerPair\" [options]=\"numImagesPerPairOptions\">\r\n                </app-select>\r\n\r\n                <app-upload-image label=\"Pasta contendo as imagens das cartas\" \r\n                    [form]=\"form\" controlName=\"cardImages\" [selectAllDir]=\"true\">\r\n                </app-upload-image>\r\n            </div>\r\n\r\n            <div class=\"form-line\">\r\n                <app-select label=\"Tipo de identificação das posições das cartas\" \r\n                    [form]=\"form\" controlName=\"cardPositionIdType\" [options]=\"cardPositionOptions\">\r\n                </app-select>\r\n            </div>\r\n        </form>\r\n\r\n        <div>\r\n            <button mat-raised-button type=\"submit\" color=\"primary\" (click)=\"submit()\">Criar jogo</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngSwitchCase=\"INPUT_TYPE.CONFIG_FILE\">\r\n        <input type=\"file\" #inputFile hidden (change)=\"onSelectConfigFile($event)\" accept=\"txt\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"inputFile.click()\">Selecionar arquivo</button>\r\n    </div>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MaterialModule } from 'src/app/material.module';\nimport { InputModule } from 'src/app/shared/components/input/input.module';\nimport { GameConfigFormComponent } from './game-config-form/game-config-form.component';\nimport { HomeComponent } from './home/home.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HomeComponent\n    }\n]\n\n@NgModule({\n    declarations: [\n        HomeComponent, \n        GameConfigFormComponent\n    ],\n    imports: [\n        CommonModule,\n        RouterModule.forChild(routes),\n        MaterialModule,\n        ReactiveFormsModule,\n        FormsModule,\n        InputModule,\n    ],\n    schemas: [ CUSTOM_ELEMENTS_SCHEMA ]\n})\nexport class HomeModule { }\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-home',\r\n    templateUrl: './home.component.html',\r\n    styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent {\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\n    <mat-toolbar-row>\n        <span class=\"title\">MEMORY GAME</span>\n    </mat-toolbar-row>\n</mat-toolbar>\n\n<div class=\"content\">\n    <app-game-config-form></app-game-config-form>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}