{"version":3,"sources":["webpack:///src/app/shared/components/translation/translation.module.ts","webpack:///src/app/services/toast.service.ts","webpack:///src/app/shared/model/game-config.model.ts","webpack:///src/app/shared/components/translation/translation-menu/translation-values.ts","webpack:///src/app/shared/components/dialog/confirmation-dialog/confirmation-dialog-data.ts","webpack:///src/app/shared/components/translation/translation.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/services/game-config-file.service.ts","webpack:///src/app/services/dialog.service.ts","webpack:///src/app/shared/util/array.util.ts","webpack:///src/app/shared/components/dialog/dialog-values.ts","webpack:///src/app/shared/constants/icons.ts","webpack:///src/app/menu-values.ts","webpack:///src/app/shared/model/card.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/shared/constants/error-message.values.ts","webpack:///src/app/services/game.service.ts","webpack:///src/app/shared/enums/card-id-type.enum.ts","webpack:///src/app/app.module.ts","webpack:///src/app/shared/error/game-config-error.ts","webpack:///src/app/shared/enums/audio.enum.ts","webpack:///src/app/shared/components/translation/translation-menu/translation-menu.component.ts","webpack:///src/app/shared/components/translation/translation-menu/translation-menu.component.html","webpack:///src/app/shared/components/dialog/confirmation-dialog/confirmation-dialog.component.ts","webpack:///src/app/shared/components/dialog/confirmation-dialog/confirmation-dialog.component.html","webpack:///src/app/services/audio.service.ts","webpack:///src/app/services/feedback.service.ts","webpack:///src/app/shared/util/file.util.ts","webpack:///src/app/shared/constants/global.values.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/material.module.ts","webpack:///src/app/shared/model/file-upload.model.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["TranslationModule","ToastService","message","milliseconds","_showToast","close","isVisible","type","backgroundColor","mixin","toast","position","timer","showConfirmButton","showCloseButton","customClass","title","background","fire","error","GameConfig","numPairImages","cards","length","singleCardPerPair","_hasAllRequiredValues","isValid","cardIdType","_isValidBackgroundImgSrc","_isValidCards","trim","addCustomSoundsPerCard","every","value","undefined","backgroundImgSrc","isValidImageSrc","card","hasValidFiles","TRANSLATION_VALUES","menuBtn","tooltip","pt","en","language","ConfirmationDialogData","DialogHeader","TranslationService","translate","addLangs","_browserLang","_getBrowserLang","use","match","_storedLang","getBrowserLang","key","get","translation","params","getParsedResult","getLangs","localStorage","getItem","lang","setItem","environment","production","ERROR_TRANSLATION","configFile","GameConfigFileService","gameConfig","downloadJson","uploadFile","json","_readUploadedFile","Object","assign","invalid","uploadJson","src","upload","DialogService","dialog","translationService","widthPercent","window","screen","width","data","dialogRef","open","_getWidthAccordingScreen","afterClosed","subscribe","confirm","okCallback","callback","confirmQuestion","openConfirmationDialog","header","icon","iconColor","getTranslation","gameIsNotOverWarning","bodyText","liveGameConfirmation","component","ArrayUtil","arr1","arr2","x","includes","arr","reduce","acc","curr","DIALOG_TRANSLATION","ICONS","NUM_ICONS","MENUS","text","routerLink","Card","code","image","audio","isValidImage","isValidAudio","AppComponent","router","gameService","dialogService","MENU_LIST","_resetToolbarTitle","setToolbarTitleDefault","toolbarTitle","menuItem","isPlaying","openLiveGameConfirmationDialog","liveGame","navigateByUrl","onChangeLanguage","ERROR_MSG_TRANSLATION","unexpectedError","diffImagesPerPairFilename","exceededMaxNumIcons","IMG_FILENAME_SEP","fileNameSeparator","GameService","library","feedbackService","audioService","configFileService","_playSound","_pairCount","_foundPairCodes","_coverCards","_selectedCard1","_selectedCard2","addIcons","_toolbarTitle","_setDefaultToolbarTitle","getTranslationByKey","_gameConfig","isGameFinished","navigate","downloadGameConfig","readUploadedConfigFile","_handleCreateError","create","_getCards","_loadAudios","state","cardAudios","map","load","handleError","_reset","_getCardsForDifferentImagesPerPair","_getCardsForSameImagePerPair","numPairs","next","i","_getFinalShuffledCardsWithId","_shuffleCards","JSON","parse","stringify","forEach","id","originalCards","keys","_getFilenamePrefixForDiffImagesPerPair","filter","_getCardImageFilenamePrefix","push","cardImages","filenames","cardImage","occurrences","getNumOccurrences","values","some","count","filename","split","index","temp","newIdx","Math","floor","random","numCols","ROW_COLUMN","numRows","idx","r","currCardRow","slice","col","_getLetter","String","fromCharCode","charCodeAt","choosen","play","TURN_CARD","_handleFoundPair","win","playSound","setTimeout","WIN","winNotificationTimeout","CORRECT","asObservable","pipe","images","audios","numMismatch","hasSameName","find","CardIdTypeEnum","CardIdTypeHelper","CardIdTypeNameTranslations","NUMBERS","HttpLoaderFactory","httpClient","AppModule","forRoot","loader","provide","useFactory","deps","GameConfigError","Error","AudioEnum","TranslationMenuComponent","service","VALUES","onChange","languages","_setSelectedLang","getAllLanguages","_getLangObj","selectedLanguage","getLang","toUpperCase","flag","setLang","emit","ConfirmationDialogComponent","TRANSLATION","AUDIO_DIR_PATH","AUDIO_SRC","AudioService","_audioMap","entries","_load","cardAudio","Audio","audioEnumOrFilename","FeedbackService","toastService","handleUnexpectedError","toastErrorTranslation","errorTranslation","FileUtil","filenameNoExtension","link","document","createElement","href","URL","createObjectURL","Blob","download","body","appendChild","click","removeChild","base64","base64SubStr","base64Index","indexOf","from","substring","toString","routes","path","loadChildren","then","m","HomeModule","GameBuilderModule","GameModule","CreditsModule","AppRoutingModule","MaterialModule","IMAGE_BASE_64_REGEX","RegExp","AUDIO_BASE_64_REGEX","FileUpload","fileUpload","name","name2","_isValidSrc","base64Regex","_isValidUrl","test","url","bootstrapModule","err","console","webpackEmptyAsyncContext","req","Promise","resolve","e","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MaterialModule } from 'src/app/material.module';\r\nimport { TranslationMenuComponent } from './translation-menu/translation-menu.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        TranslationMenuComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        TranslateModule,\r\n    ],\r\n    exports: [\r\n        TranslationMenuComponent\r\n    ]\r\n})\r\nexport class TranslationModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n\r\n    success(message: string, milliseconds = 5000) {\r\n        this._showToast(message, 'success', '#51A351', milliseconds);\r\n    }\r\n\r\n    error(message: string, milliseconds = 5000) {\r\n        this._showToast(message, 'error', '#BD362F', milliseconds);\r\n    }\r\n\r\n    info(message: string, milliseconds: number = 5000) {\r\n        this._showToast(message, 'info', '#389BB7', milliseconds);\r\n    }\r\n\r\n    warning(message: string, milliseconds = 5000) {\r\n        this._showToast(message, 'warning', '#F89406', milliseconds);\r\n    }\r\n\r\n    close() {\r\n        Swal.close();\r\n    }\r\n\r\n    showing() {\r\n        return Swal.isVisible();\r\n    }\r\n\r\n    private _showToast(message: string, type: SweetAlertIcon, backgroundColor: string, milliseconds: number) {\r\n        Swal.mixin({\r\n            toast: true,\r\n            position: 'top',\r\n            timer: milliseconds,\r\n            showConfirmButton: false,\r\n            showCloseButton: !milliseconds,\r\n            customClass : {\r\n                title: 'custom-toast-title'\r\n            },\r\n            background: backgroundColor,\r\n        })\r\n        .fire(message, '', type);\r\n    }\r\n\r\n    showInvalidFormError() {\r\n        this.error('Preencha todos os campos obrigatórios');\r\n    }\r\n    \r\n}\r\n","import { CardIdTypeEnum, CardIdTypeHelper } from \"../enums/card-id-type.enum\";\r\nimport { Card } from \"./card\";\r\nimport { FileUpload } from \"./file-upload.model\";\r\n\r\nexport class GameConfig {\r\n\r\n    title: string;\r\n    cardIdType: CardIdTypeEnum;\r\n    backgroundImgSrc?: string;\r\n    singleCardPerPair: boolean;\r\n    addCustomSoundsPerCard: boolean;\r\n    cards: Card[];\r\n    cardImages: FileUpload[]; // TODO remover\r\n\r\n    get numPairs(): number {\r\n        let numPairImages = this.cards.length;\r\n        if (!this.singleCardPerPair) {\r\n            numPairImages /= 2;\r\n        }\r\n        return numPairImages;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        return this._hasAllRequiredValues() && \r\n            CardIdTypeHelper.isValid(this.cardIdType) &&\r\n            this._isValidBackgroundImgSrc() && \r\n            this._isValidCards();\r\n    }\r\n\r\n    private _hasAllRequiredValues(): boolean {\r\n        return !!(this.title?.trim()) && ([\r\n            this.cardIdType,\r\n            this.singleCardPerPair,\r\n            this.addCustomSoundsPerCard,\r\n            this.cards,\r\n        ]).every(value => value !== null && value !== undefined);\r\n    }\r\n\r\n    private _isValidBackgroundImgSrc(): boolean {\r\n        return !this.backgroundImgSrc || FileUpload.isValidImageSrc(this.backgroundImgSrc);\r\n    }\r\n\r\n    private _isValidCards(): boolean {\r\n        return this.cards.length > 0 && this.cards.every(card => Card.hasValidFiles(card));\r\n    }\r\n\r\n}\r\n","export const TRANSLATION_VALUES = {\r\n    menuBtn: {\r\n        tooltip: {\r\n            pt: 'Escolher idioma',\r\n            en: 'Choose language'\r\n        }\r\n    },\r\n    \r\n    language: {\r\n        pt: {\r\n            pt: 'Português',\r\n            en: 'Inglês'\r\n        },\r\n        en: {\r\n            pt: 'Portuguese',\r\n            en: 'English'\r\n        },\r\n    }\r\n}\r\n","export class ConfirmationDialogData {\r\n    header: DialogHeader;\r\n    bodyText: string;\r\n    okCallback: Function;\r\n}\r\n\r\nexport class DialogHeader {\r\n    icon: string;\r\n    iconColor: string;\r\n    title: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ITranslation } from './translation.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TranslationService {\r\n\r\n    private _browserLang: any;\r\n\r\n    constructor(\r\n        private translate: TranslateService,\r\n    ) { \r\n        translate.addLangs(['en', 'pt']);\r\n        this._browserLang = this._getBrowserLang();\r\n        translate.use(this._browserLang?.match(/pt|en/) ? this._browserLang : 'en');\r\n    }\r\n\r\n    private _getBrowserLang() {\r\n        return this._storedLang || this.translate.getBrowserLang();\r\n    }\r\n\r\n    getTranslationByKey(key: any) {\r\n        return this.translate.get(key);\r\n    }\r\n\r\n    getTranslation(translation: ITranslation, params?: Object): string {\r\n        return this.translate.getParsedResult(translation, this._getBrowserLang(), params);\r\n    }\r\n\r\n    getLang(): string {\r\n        return (this._storedLang || this._browserLang);\r\n    }\r\n\r\n    getAllLanguages() {\r\n        return this.translate.getLangs();\r\n    }\r\n\r\n    private get _storedLang() {\r\n        return localStorage.getItem(\"language\");\r\n    }\r\n\r\n    setLang(lang: string) {\r\n        localStorage.setItem(\"language\", lang);\r\n        this.translate.use(lang);\r\n        this._browserLang = this._getBrowserLang();\r\n    }\r\n}\r\n","export const environment = {\r\n    production: false\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { GameConfigError } from '../shared/error/game-config-error';\r\nimport { FileUpload } from '../shared/model/file-upload.model';\r\nimport { GameConfig } from '../shared/model/game-config.model';\r\nimport { FileUtil } from '../shared/util/file.util';\r\nimport { ERROR_MSG_TRANSLATION } from '../shared/constants/error-message.values';\r\n\r\nconst ERROR_TRANSLATION = ERROR_MSG_TRANSLATION.configFile;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GameConfigFileService {\r\n\r\n    downloadGameConfig(gameConfig: GameConfig) {\r\n        FileUtil.downloadJson(gameConfig, gameConfig.title);\r\n    }\r\n\r\n    readUploadedConfigFile(uploadFile: FileUpload): GameConfig {\r\n        let json = this._readUploadedFile(uploadFile);\r\n        let gameConfig: GameConfig = Object.assign(new GameConfig(), json);\r\n        if (!gameConfig.isValid()) {\r\n            throw new GameConfigError(ERROR_TRANSLATION.invalid);\r\n        }\r\n        return gameConfig;\r\n    }\r\n\r\n    private _readUploadedFile(uploadFile: FileUpload): any {\r\n        try {\r\n            return FileUtil.uploadJson(uploadFile.src);\r\n        } catch (error) {\r\n            throw new GameConfigError(ERROR_TRANSLATION.upload);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ConfirmationDialogData } from '../shared/components/dialog/confirmation-dialog/confirmation-dialog-data';\r\nimport { ConfirmationDialogComponent } from '../shared/components/dialog/confirmation-dialog/confirmation-dialog.component';\r\nimport { DIALOG_TRANSLATION } from '../shared/components/dialog/dialog-values';\r\nimport { TranslationService } from '../shared/components/translation/translation.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n\r\n    constructor(\r\n        private dialog: MatDialog,\r\n        private translationService: TranslationService,\r\n    ) { }\r\n\r\n    private _getWidthAccordingScreen(widthPercent?: number) {\r\n        return (window.screen.width < 700 ? \r\n            90 : \r\n            widthPercent || 60\r\n        ) + '%';\r\n    }\r\n\r\n    openConfirmationDialog(data: ConfirmationDialogData) {\r\n        const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\r\n            width: this._getWidthAccordingScreen(40),\r\n            data: data\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(confirm => {\r\n            if (!confirm) {\r\n                return;\r\n            }\r\n            data.okCallback();\r\n        });\r\n    }\r\n\r\n    openLiveGameConfirmationDialog(callback: Function, confirmQuestion?: string) {\r\n        this.openConfirmationDialog({\r\n            header: {\r\n                icon: 'pan_tool',\r\n                iconColor: 'darkorange',\r\n                title: this.translationService.getTranslation(DIALOG_TRANSLATION.gameIsNotOverWarning)\r\n            },\r\n            bodyText: confirmQuestion ?? this.translationService.getTranslation(DIALOG_TRANSLATION.liveGameConfirmation),\r\n            okCallback: callback\r\n        });\r\n    }\r\n\r\n    openCustomDialog(component: any, width: number, data: any = {}) {\r\n        this.dialog.open(component, {\r\n            width: this._getWidthAccordingScreen(width),\r\n            data: data\r\n        });\r\n    }\r\n\r\n}\r\n","export class ArrayUtil {\r\n\r\n    static equals<T>(arr1: T[], arr2: T[]): boolean {\r\n        return (\r\n            arr1.length === arr2.length &&\r\n            arr1.every(x => arr2.includes(x)) &&\r\n            arr2.every(x => arr1.includes(x))\r\n        );\r\n    }\r\n\r\n    static getNumOccurrences<T>(arr: T[]): any { /* keys: elements, values: num occurrences */\r\n        return arr.reduce(function (acc: any, curr) {\r\n            return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc\r\n        }, {});\r\n    }\r\n    \r\n}\r\n","export const DIALOG_TRANSLATION = {\r\n\r\n    gameIsNotOverWarning: {\r\n        pt: 'Espere! O jogo ainda não acabou!',\r\n        en: 'Hang on! The game is not over yet!'\r\n    },\r\n\r\n    liveGameConfirmation: {\r\n        pt: 'Tem certeza que deseja sair do jogo?',\r\n        en: 'Are you sure you want to exit the game?'\r\n    },\r\n    \r\n}\r\n","import {\r\n    faApple,\r\n    faTwitter\r\n} from '@fortawesome/free-brands-svg-icons';\r\nimport {\r\n    faBug,\r\n    faCar,\r\n    faChild,\r\n    faCloud,\r\n    faFutbol,\r\n    faGamepad,\r\n    faGhost,\r\n    faHandPaper,\r\n    faHeart,\r\n    faHippo,\r\n    faHome,\r\n    faLeaf,\r\n    faMoon,\r\n    faMusic,\r\n    faPaintBrush,\r\n    faPencilAlt,\r\n    faPlane,\r\n    faRocket,\r\n    faStar,\r\n    faSun,\r\n    faTree,\r\n    faTruckMonster\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const ICONS = [\r\n    faSun,\r\n    faCloud,\r\n    faMoon,\r\n    faStar,\r\n    faBug,\r\n    faTwitter,\r\n    faHippo,\r\n    faTree,\r\n    faCar,\r\n    faTruckMonster,\r\n    faPlane,\r\n    faRocket,\r\n    faHeart,\r\n    faFutbol,\r\n    faHandPaper,\r\n    faApple,\r\n    faLeaf,\r\n    faHome,\r\n    faPencilAlt,\r\n    faMusic,\r\n    faChild,\r\n    faGamepad,\r\n    faPaintBrush,\r\n    faGhost,\r\n];\r\n\r\nexport const NUM_ICONS = ICONS.length;\r\n","export const MENUS = [\r\n    {\r\n        icon: 'home',\r\n        text: {\r\n            pt: 'Início',\r\n            en: 'Home'\r\n        },\r\n        routerLink: '/',\r\n    },\r\n    {\r\n        icon: 'construction',\r\n        text:{\r\n            pt: 'Crie seu jogo',\r\n            en: 'Create your game'\r\n        },\r\n        routerLink: '/game-builder',\r\n    },\r\n    {\r\n        icon: 'sports_esports',\r\n        text: {\r\n            pt: 'Demo',\r\n            en: 'Demo'\r\n        },\r\n        routerLink: '/game-builder/demo',\r\n    },\r\n    {\r\n        icon: 'copyright',\r\n        text: {\r\n            pt: 'Créditos',\r\n            en: 'Credits'\r\n        },\r\n        routerLink: '/credits',\r\n    },\r\n];","import { FileUpload } from \"./file-upload.model\";\r\n\r\nexport class Card {\r\n    id: string;\r\n    icon?: any;\r\n\r\n    constructor(\r\n        public code: string,\r\n        public image: FileUpload,\r\n        public audio?: FileUpload\r\n    ) {}\r\n\r\n    static hasValidFiles(card: Card) {\r\n        return FileUpload.isValidImage(card.image) && (!card.audio || FileUpload.isValidAudio(card.audio));\r\n    }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MENUS } from './menu-values';\r\nimport { DialogService } from './services/dialog.service';\r\nimport { GameService } from './services/game.service';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    readonly MENU_LIST = MENUS;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private gameService: GameService,\r\n        private dialogService: DialogService,\r\n    ) {}\r\n\r\n    ngOnInit(): void {\r\n        this._resetToolbarTitle();\r\n    }\r\n\r\n    onChangeLanguage() {\r\n        this._resetToolbarTitle();\r\n    }\r\n\r\n    private _resetToolbarTitle() {\r\n        this.gameService.setToolbarTitleDefault();\r\n    }\r\n\r\n    get toolbarTitle() {\r\n        return this.gameService.toolbarTitle;\r\n    }\r\n\r\n    goTo(menuItem: any) {        \r\n        if (this.gameService.isPlaying) {\r\n            return this.dialogService.openLiveGameConfirmationDialog(() => {\r\n                this.gameService.liveGame();\r\n                this.router.navigateByUrl(menuItem.routerLink);\r\n            });\r\n        }\r\n\r\n        this._resetToolbarTitle();\r\n        this.router.navigateByUrl(menuItem.routerLink);\r\n    }\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row>\r\n        <button mat-icon-button (click)=\"sidenav.toggle()\" matTooltip=\"Menu\" matTooltipPosition=\"right\" aria-label=\"Menu\">\r\n            <mat-icon>menu</mat-icon>\r\n        </button>\r\n\r\n        <div class=\"toolbar-title\">{{ toolbarTitle }}</div>\r\n\r\n        <app-translation-menu (onChange)=\"onChangeLanguage()\"></app-translation-menu>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<mat-sidenav-container>\r\n    <mat-sidenav #sidenav class=\"sidenav\">\r\n        <mat-nav-list>\r\n            <mat-list-item *ngFor=\"let menu of MENU_LIST\" (click)=\"sidenav.close(); goTo(menu)\">\r\n                <mat-icon color=\"primary\">{{ menu.icon }}</mat-icon>\r\n                <span class=\"mb-0 ms-1\">{{ 'TRANSLATION' | translate: menu.text }}</span>\r\n            </mat-list-item>\r\n        </mat-nav-list>\r\n    </mat-sidenav>\r\n\r\n    <mat-sidenav-content class=\"content\">\r\n        <router-outlet></router-outlet>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { NUM_ICONS } from \"./icons\";\r\nimport { CardIdTypeEnum, CardIdTypeNameTranslations } from \"../enums/card-id-type.enum\";\r\n\r\nconst ICONS = CardIdTypeNameTranslations[CardIdTypeEnum.ICONS];\r\n\r\nexport const ERROR_MSG_TRANSLATION = {\r\n\r\n    unexpectedError: {\r\n        pt: 'Ops! Ocorreu um erro inesperado. Tente novamente.',\r\n        en: 'Oops! An unexpected error has occurred. Try again.'\r\n    },\r\n\r\n    diffImagesPerPairFilename: {\r\n        pt: 'Em caso de imagens diferentes por par, os nomes dos arquivos devem seguir o padrão informado.',\r\n        en: 'In case of different images per pair, the file names must follow the pattern informed.'\r\n    },\r\n\r\n    configFile: {\r\n        upload: {\r\n            pt: 'Erro ao processar arquivo de configuração.',\r\n            en: 'Error processing configuration file.'\r\n        },\r\n        invalid: {\r\n            pt: 'O arquivo de configuração enviado é inválido.',\r\n            en: 'The uploaded configuration file is invalid.'\r\n        }\r\n    },\r\n\r\n    exceededMaxNumIcons: {\r\n        pt: `Para identificar cartas com ${ICONS.pt}, o número máximo de cartas é ${NUM_ICONS}.`,\r\n        en: `To identify cards with ${ICONS.en}, the maximum number of cards is ${NUM_ICONS}.`\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FaIconLibrary } from '@fortawesome/angular-fontawesome';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { delay } from \"rxjs/operators\";\r\nimport { TranslationService } from '../shared/components/translation/translation.service';\r\nimport { ERROR_MSG_TRANSLATION } from '../shared/constants/error-message.values';\r\nimport { VALUES } from '../shared/constants/global.values';\r\nimport { ICONS, NUM_ICONS } from '../shared/constants/icons';\r\nimport { AudioEnum } from '../shared/enums/audio.enum';\r\nimport { CardIdTypeEnum } from '../shared/enums/card-id-type.enum';\r\nimport { GameConfigError } from '../shared/error/game-config-error';\r\nimport { Card } from '../shared/model/card';\r\nimport { FileUpload } from '../shared/model/file-upload.model';\r\nimport { GameConfig } from '../shared/model/game-config.model';\r\nimport { ArrayUtil } from '../shared/util/array.util';\r\nimport { AudioService } from './audio.service';\r\nimport { FeedbackService } from './feedback.service';\r\nimport { GameConfigFileService } from './game-config-file.service';\r\n\r\nconst IMG_FILENAME_SEP = VALUES.upload.fileNameSeparator;\r\nconst ERROR_TRANSLATION = ERROR_MSG_TRANSLATION;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GameService {\r\n\r\n    private _toolbarTitle: string;\r\n    private _playSound: boolean = true;\r\n    private _gameConfig: GameConfig;\r\n    private _pairCount: number = 0;\r\n    private _foundPairCodes: string[] = []\r\n    private _coverCards = new BehaviorSubject<Card[]>([]);\r\n    private _selectedCard1: Card = null;\r\n    private _selectedCard2: Card = null;\r\n\r\n    constructor(\r\n        library: FaIconLibrary,\r\n        private router: Router,\r\n        private feedbackService: FeedbackService,\r\n        private translationService: TranslationService,\r\n        private audioService: AudioService,\r\n        private configFileService: GameConfigFileService,\r\n    ) {\r\n        library.addIcons(...ICONS);\r\n    }\r\n\r\n    get toolbarTitle() {\r\n        return this._toolbarTitle;\r\n    }\r\n\r\n    setToolbarTitleDefault() {\r\n        if (!this.isPlaying) {\r\n            this._setDefaultToolbarTitle();\r\n        }\r\n    }\r\n\r\n    private _setDefaultToolbarTitle() {\r\n        this.translationService.getTranslationByKey('TOOLBAR_TITLE')\r\n            .subscribe(toolbarTitle => this._toolbarTitle = toolbarTitle);\r\n    }\r\n\r\n    get config() {\r\n        return this._gameConfig;\r\n    }\r\n\r\n    get isGameFinished(): boolean {\r\n        return this._pairCount == 0;\r\n    }\r\n\r\n    get isPlaying(): boolean {\r\n        return !!this._gameConfig && !this.isGameFinished;\r\n    }\r\n\r\n    liveGame() {\r\n        this._setDefaultToolbarTitle();\r\n        this._gameConfig = null;\r\n        this._pairCount = 0;\r\n        this._foundPairCodes = [];\r\n    }\r\n\r\n    goHome() {\r\n        this.liveGame();\r\n        this.router.navigate(['']);\r\n    }\r\n\r\n    downloadGameConfig(gameConfig: GameConfig) {\r\n        this.configFileService.downloadGameConfig(gameConfig);\r\n    }\r\n\r\n    createGameFromUploadedConfigFile(uploadFile: FileUpload) {\r\n        let gameConfig: GameConfig = null;\r\n        try {\r\n            gameConfig = this.configFileService.readUploadedConfigFile(uploadFile);\r\n        } \r\n        catch (error) {\r\n            this._handleCreateError(error);\r\n            throw error;\r\n        }\r\n\r\n        this.create(gameConfig);\r\n    }\r\n\r\n    create(gameConfig: GameConfig) {\r\n        this._gameConfig = gameConfig;\r\n        try {\r\n            let cards = this._getCards();\r\n            this._toolbarTitle = gameConfig.title;\r\n            this._loadAudios(cards);\r\n            this.router.navigate(['game'], {\r\n                state: {\r\n                    cards: cards\r\n                }\r\n            });\r\n        } \r\n        catch (error) {\r\n            this._handleCreateError(error);\r\n        }\r\n    }\r\n\r\n    private _loadAudios(cards: Card[]) {\r\n        let cardAudios: FileUpload[] = null;\r\n        if (this._gameConfig.addCustomSoundsPerCard) {\r\n            cardAudios = cards.map(card => card.audio);\r\n        }\r\n        this.audioService.load(cardAudios);\r\n    }\r\n\r\n    private _handleCreateError(error: any) {\r\n        this._gameConfig = null;\r\n        this.feedbackService.handleError(error);\r\n    }\r\n\r\n    private _getCards(): Card[] {\r\n        this._reset();\r\n\r\n        if (this._gameConfig.cardIdType === CardIdTypeEnum.ICONS && this._pairCount * 2 > NUM_ICONS) {\r\n            throw new GameConfigError(ERROR_TRANSLATION.exceededMaxNumIcons);\r\n        }\r\n\r\n        if (!this._gameConfig.singleCardPerPair) {\r\n            return this._getCardsForDifferentImagesPerPair();\r\n        }\r\n        return this._getCardsForSameImagePerPair();\r\n    }\r\n\r\n    private _reset() {\r\n        this._pairCount = this._gameConfig.numPairs;\r\n        this._foundPairCodes = [];\r\n        this._coverCards.next([]);\r\n    }\r\n\r\n    private _getCardsForSameImagePerPair(): Card[] {\r\n        let cards = this._gameConfig.cards.map((card, i) => new Card(`${i+1}`, card.image, card.audio));\r\n\r\n        return this._getFinalShuffledCardsWithId([\r\n            ...this._shuffleCards(cards),\r\n            ...this._shuffleCards(JSON.parse(JSON.stringify(cards)))\r\n        ]);\r\n    }\r\n\r\n    private _getFinalShuffledCardsWithId(cards: Card[]) {\r\n        cards.forEach((card, i) => card.id = `${i + 1}`);\r\n\r\n        if (this._gameConfig.cardIdType === CardIdTypeEnum.ICONS) {\r\n            cards.forEach((card, i) => card.icon = ICONS[i]);\r\n        }\r\n\r\n        return cards;\r\n    }\r\n\r\n    private _getCardsForDifferentImagesPerPair(): Card[] {\r\n        /* Espera-se que as imagens dos mesmos pares tenham o nome com o mesmo prefixo antes do SEP */\r\n        let originalCards = this._gameConfig.cards;\r\n        let keys = this._getFilenamePrefixForDiffImagesPerPair(originalCards.map(card => card.image));\r\n        let cards: Card[] = [];\r\n\r\n        keys.forEach(key => {\r\n            originalCards\r\n                .filter(card => this._getCardImageFilenamePrefix(card.image) === key)\r\n                .forEach(card => cards.push(new Card(key, card.image, card.audio)));\r\n        });\r\n\r\n        return this._getFinalShuffledCardsWithId(this._shuffleCards(cards));\r\n    }\r\n\r\n    private _getFilenamePrefixForDiffImagesPerPair(cardImages: FileUpload[]) {\r\n        let filenames = cardImages.map(cardImage => this._getCardImageFilenamePrefix(cardImage));\r\n        let occurrences = ArrayUtil.getNumOccurrences(filenames);\r\n        let keys = Object.keys(occurrences);\r\n\r\n        if (keys.length !== filenames.length / 2 ||\r\n            Object.values(occurrences).some(count => count != 2)\r\n        ) {\r\n            throw new GameConfigError(ERROR_TRANSLATION.diffImagesPerPairFilename);\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    private _getCardImageFilenamePrefix(cardImage: FileUpload) {\r\n        return cardImage.filename.split(IMG_FILENAME_SEP)[0];\r\n    }\r\n\r\n    private _shuffleCards(cards: Card[]) {\r\n        for (let index = 0; index < cards.length; index++) {\r\n            const temp = cards[index];\r\n            const newIdx = Math.floor(Math.random() * cards.length);\r\n            cards[index] = cards[newIdx];\r\n            cards[newIdx] = temp;\r\n        }\r\n        return cards;\r\n    }\r\n\r\n    setIdAsRowColumn(cards: Card[], numCols: number) {\r\n        if (this._gameConfig.cardIdType == CardIdTypeEnum.ROW_COLUMN) {\r\n            let numRows = cards.length / numCols;\r\n            for (let r = 0; r < numRows; r++) {\r\n                let idx = r * numCols;\r\n                let currCardRow = cards.slice(idx, idx + numCols);\r\n                currCardRow.forEach((card, col) => card.id = `${this._getLetter(r)}${col+1}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _getLetter(index: number) {\r\n        return String.fromCharCode('A'.charCodeAt(0) + index);\r\n    }\r\n\r\n\r\n    onChooseCard(choosen: Card): boolean {\r\n        if (this.isGameFinished || this._foundPairCodes.includes(choosen.code)) {\r\n            if (this._playSound && choosen.audio) {\r\n                this.audioService.play(choosen.audio.filename);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this._playSound) {\r\n            this.audioService.play(choosen.audio?.filename ?? AudioEnum.TURN_CARD);\r\n        }\r\n\r\n        if (this._selectedCard1 === null) {\r\n            this._selectedCard1 = choosen;\r\n            return;\r\n        }\r\n\r\n        if (choosen.id === this._selectedCard1.id) {\r\n            return;\r\n        }\r\n\r\n        this._selectedCard2 = choosen;\r\n        if (this._selectedCard1.code == this._selectedCard2.code) {\r\n            this._handleFoundPair(choosen);\r\n        } else {\r\n            this._coverCards.next([this._selectedCard1, this._selectedCard2]);\r\n        }\r\n\r\n        this._selectedCard1 = null;\r\n        this._selectedCard2 = null;\r\n\r\n        let win = this.isGameFinished;\r\n\r\n        if (win && this.playSound) {\r\n            setTimeout(() => {\r\n                this.audioService.play(AudioEnum.WIN);\r\n            }, VALUES.winNotificationTimeout / 2);\r\n        }\r\n\r\n        return win;\r\n    }\r\n\r\n    private _handleFoundPair(choosen: Card) {\r\n        this._pairCount--;\r\n        this._foundPairCodes.push(choosen.code);\r\n        if (this._playSound) {\r\n            setTimeout(() => {\r\n                this.audioService.play(AudioEnum.CORRECT);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n\r\n    restartGame(cards: Card[]) {\r\n        this._reset();\r\n        return this._getFinalShuffledCardsWithId( this._shuffleCards(cards) );\r\n    }\r\n\r\n    getCoveredCards() {\r\n        return this._coverCards.asObservable().pipe(delay(1200));\r\n    }\r\n\r\n    get playSound() {\r\n        return this._playSound;\r\n    }\r\n\r\n    swapPlaySound() {\r\n        this._playSound = !this._playSound;\r\n    }\r\n\r\n    /* Game Config Building */\r\n\r\n    validateCardUploads(images: FileUpload[], audios: FileUpload[]) { \r\n        if (images.length !== audios.length) {\r\n            throw new GameConfigError({\r\n                pt: 'A quantidade de arquivos de Imagem e Áudio não são iguais',\r\n                en: 'The number of Image and Audio files are not the same'\r\n            });\r\n        }\r\n\r\n        let numMismatch = images.filter(image => !audios.some(audio => audio.hasSameName(image)));\r\n        if (numMismatch.length) {\r\n            throw new GameConfigError({\r\n                pt: `Existe(m) ${numMismatch} arquivo(s) de imagem sem arquivo de audio com mesmo nome.`,\r\n                en: `There are ${numMismatch} image files without an audio file with the same name.`\r\n            });\r\n        }\r\n    }\r\n\r\n    buildCardsFromValidUploads(images: FileUpload[], audios?: FileUpload[]): Card[] {\r\n        if (!(audios?.length)) {\r\n            return images.map(image => new Card(null, image, null));\r\n        }\r\n        \r\n        return images.map(image => {\r\n            let audio = audios.find(x => x.hasSameName(image));\r\n            return new Card(null, image, audio);\r\n        });\r\n    }\r\n\r\n}\r\n","export enum CardIdTypeEnum {\r\n    NUMBERS = 1,\r\n    ROW_COLUMN,\r\n    ICONS    \r\n}\r\n\r\nexport class CardIdTypeHelper {\r\n\r\n    static isValid(cardIdType: any): boolean {\r\n        return typeof cardIdType == 'number' && Object.values(CardIdTypeEnum).includes(cardIdType);\r\n    }\r\n    \r\n}\r\n\r\nexport const CardIdTypeNameTranslations = {\r\n    [CardIdTypeEnum.NUMBERS]: {\r\n        pt: 'Números',\r\n        en: 'Numbers'\r\n    },\r\n\r\n    [CardIdTypeEnum.ROW_COLUMN]: { \r\n        pt: 'Linha/Coluna',\r\n        en: 'Row/Column'\r\n    },\r\n\r\n    [CardIdTypeEnum.ICONS]: { \r\n        pt: 'Ícones',\r\n        en: 'Icons'\r\n    },\r\n}\r\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MaterialModule } from './material.module';\r\nimport { TranslationModule } from './shared/components/translation/translation.module';\r\n\r\nexport function HttpLoaderFactory(httpClient: HttpClient) {\r\n    return new TranslateHttpLoader(httpClient, './assets/i18n/', '.json');\r\n}\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        BrowserAnimationsModule,\r\n        HttpClientModule,\r\n        TranslateModule.forRoot({\r\n            loader: {\r\n                provide: TranslateLoader,\r\n                useFactory: HttpLoaderFactory,\r\n                deps: [HttpClient]\r\n            }\r\n        }),\r\n        TranslationModule,\r\n        FormsModule,\r\n        MaterialModule,\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { ITranslation } from \"../components/translation/translation.model\";\r\n\r\nexport class GameConfigError extends Error {\r\n    constructor(public translation: ITranslation) {\r\n        super('Game Config Error');\r\n    }\r\n}\r\n","export enum AudioEnum {\r\n    CORRECT = 'correct',\r\n    TURN_CARD = 'turnCard',\r\n    WIN = 'win'\r\n}\r\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { TranslationService } from '../translation.service';\r\nimport { TRANSLATION_VALUES } from './translation-values';\r\n\r\n@Component({\r\n    selector: 'app-translation-menu',\r\n    templateUrl: './translation-menu.component.html',\r\n    styleUrls: ['./translation-menu.component.scss']\r\n})\r\nexport class TranslationMenuComponent implements OnInit {\r\n\r\n    readonly VALUES = TRANSLATION_VALUES;\r\n\r\n    @Output() onChange = new EventEmitter();\r\n\r\n    languages: any[] = [];\r\n    selectedLanguage: string;\r\n\r\n    constructor(\r\n        private service: TranslationService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this._setSelectedLang();\r\n        this.languages = this.service.getAllLanguages().map(lang => this._getLangObj(lang));\r\n    }\r\n\r\n    private _setSelectedLang() {\r\n        this.selectedLanguage = this.service.getLang().toUpperCase();\r\n    }\r\n\r\n    private _getLangObj(lang: string) {\r\n        return {\r\n            lang: lang,\r\n            title: lang.toUpperCase(),\r\n            flag: `assets/images/lang-flags/${lang}-icon-lang.png`,\r\n            tooltip: `TRANSLATION_ACRONYM.${lang}`\r\n        }\r\n    }\r\n\r\n    changeLanguage(lang: string) {\r\n        this.service.setLang(lang);\r\n        this._setSelectedLang();\r\n        this.onChange.emit(lang);\r\n    }\r\n\r\n}\r\n","<button mat-button [matMenuTriggerFor]=\"langMenu\" class=\"material-icons-outlined\" aria-label=\"Choose Lang\"\r\n    matTooltip=\"{{ 'TRANSLATION' | translate: VALUES.menuBtn.tooltip }}\" matTooltipPosition=\"right\">\r\n    <mat-icon>language</mat-icon> {{ selectedLanguage }}\r\n\r\n    <mat-menu #langMenu>\r\n        <button *ngFor=\"let langBtn of languages\" mat-menu-item (click)=\"changeLanguage(langBtn.lang)\"\r\n            matTooltip=\"{{ langBtn.tooltip | translate: VALUES.language }}\" matTooltipPosition=\"right\">\r\n            <div class=\"lang-menu-item-list\">\r\n                <mat-icon>\r\n                    <img width=\"100%\" [src]=\"langBtn.flag\" [alt]=\"langBtn.lang\">\r\n                </mat-icon>\r\n                <span>{{ langBtn.title }}</span>\r\n            </div>\r\n        </button>\r\n    </mat-menu>\r\n</button>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DIALOG_TRANSLATION } from '../dialog-values';\r\nimport { ConfirmationDialogData } from './confirmation-dialog-data';\r\n\r\n@Component({\r\n    selector: 'app-confirmation-dialog',\r\n    templateUrl: './confirmation-dialog.component.html',\r\n    styleUrls: ['./confirmation-dialog.component.scss']\r\n})\r\nexport class ConfirmationDialogComponent {\r\n\r\n    readonly TRANSLATION = DIALOG_TRANSLATION;\r\n\r\n    constructor(\r\n        @Inject(MAT_DIALOG_DATA) public data: ConfirmationDialogData\r\n    ) { }\r\n\r\n}\r\n","<div class=\"dialog-header\">\r\n    <mat-icon [style.color]=\"data.header.iconColor\">{{ data.header.icon }}</mat-icon>\r\n    <div mat-dialog-title>{{ data.header.title }}</div>\r\n</div>\r\n\r\n<div mat-dialog-content>\r\n    <div class=\"text-center mb-2\">\r\n        {{ data.bodyText }}\r\n    </div>\r\n</div>\r\n\r\n<div mat-dialog-actions>\r\n    <button mat-stroked-button mat-dialog-close id=\"modal-cancel-btn\" color=\"primary\">\r\n        <mat-icon>thumb_down</mat-icon> {{ 'ANSWER.NO' | translate }}\r\n    </button>\r\n\r\n    <button mat-raised-button mat-dialog-close=\"ok\" id=\"modal-ok-btn\" color=\"primary\">\r\n        <mat-icon>thumb_up</mat-icon> {{ 'ANSWER.YES' | translate }}\r\n    </button>\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport { AudioEnum } from '../shared/enums/audio.enum';\nimport { FileUpload } from '../shared/model/file-upload.model';\n\nconst AUDIO_DIR_PATH = 'assets/audio';\nconst AUDIO_SRC = {\n    [AudioEnum.CORRECT]: 'correct.mp3',\n    [AudioEnum.TURN_CARD]: 'page-turn.mp3',\n    [AudioEnum.WIN]: 'tada.mp3',\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AudioService {\n\n    private _audioMap: { [key: string]: HTMLAudioElement };\n\n\n    load(cardAudios?: FileUpload[]) {\n        this._audioMap = {};\n        Object.entries(AUDIO_SRC).forEach(([key,src]) => {\n            this._audioMap[key] = this._load(`${AUDIO_DIR_PATH}/${src}`);\n        });\n\n        if (cardAudios) {\n            delete this._audioMap[AudioEnum.TURN_CARD];\n            cardAudios.forEach(cardAudio => {\n                this._audioMap[cardAudio.filename] = this._load(cardAudio.src);\n            });\n        }\n    }\n\n    private _load(src: string) {\n        let audio = new Audio(src);\n        audio.load();\n        return audio;\n    }\n\n    play(audioEnumOrFilename: AudioEnum | string) {\n        (this._audioMap[audioEnumOrFilename])?.play();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ToastService } from './toast.service';\nimport { DialogService } from './dialog.service';\nimport { TranslationService } from '../shared/components/translation/translation.service';\nimport { GameConfigError } from '../shared/error/game-config-error';\nimport { ERROR_MSG_TRANSLATION } from '../shared/constants/error-message.values';\nimport { ITranslation } from '../shared/components/translation/translation.model';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FeedbackService {\n\n    constructor(\n        private toastService: ToastService,\n        private dialogService: DialogService,\n        private translationService: TranslationService\n    ) { }\n\n    get dialog() {\n        return this.dialogService;\n    }\n\n    handleError(error: any): ITranslation {\n        if ( !(error instanceof GameConfigError) ) {\n            return this.handleUnexpectedError();\n        }\n\n        this.toastErrorTranslation(error.translation);\n        return error.translation;\n    }\n\n    handleUnexpectedError() {\n        const errorTranslation = ERROR_MSG_TRANSLATION.unexpectedError;\n        this.toastErrorTranslation(errorTranslation);\n        return errorTranslation;\n    }\n\n    toastErrorTranslation(translation: ITranslation) {\n        this.toastService.error(\n            this.translationService.getTranslation(translation)\n        );\n    }\n}\n","import { Buffer } from 'buffer';\r\n\r\nexport class FileUtil {\r\n\r\n    static downloadJson(data: any, filenameNoExtension: string) {\r\n        let link = document.createElement('a');\r\n        link.href = URL.createObjectURL(\r\n            new Blob([JSON.stringify(data, null, 4)], { type: 'application/json' })\r\n        );\r\n        link.download = `${filenameNoExtension}.json`;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n    }\r\n\r\n    static uploadJson(base64: string): any {\r\n        const base64SubStr = ';base64,';\r\n        let base64Index = base64.indexOf(base64SubStr) + base64SubStr.length;\r\n        return JSON.parse(\r\n            Buffer.from(base64.substring(base64Index), 'base64').toString()\r\n        );\r\n    }\r\n    \r\n}\r\n","export const VALUES = {\r\n    winNotificationTimeout: 500,\r\n    \r\n    upload: {\r\n        fileNameSeparator: '_',\r\n    },\r\n    \r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        loadChildren: () => import('./views/home/home.module').then(m => m.HomeModule)\r\n    },\r\n    {\r\n        path: 'game-builder',\r\n        loadChildren: () => import('./views/game-builder/game-builder.module').then(m => m.GameBuilderModule)\r\n    },\r\n    {\r\n        path: 'game',\r\n        loadChildren: () => import('./views/game/game.module').then(m => m.GameModule)\r\n    },\r\n    {\r\n        path: 'credits',\r\n        loadChildren: () => import('./views/credits/credits.module').then(m => m.CreditsModule)\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n    imports: [\r\n        A11yModule,\r\n        CdkStepperModule,\r\n        CdkTableModule,\r\n        CdkTreeModule,\r\n        DragDropModule,\r\n        MatAutocompleteModule,\r\n        MatBadgeModule,\r\n        MatBottomSheetModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatCardModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatStepperModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatDividerModule,\r\n        MatExpansionModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatNativeDateModule,\r\n        MatPaginatorModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatRadioModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatSidenavModule,\r\n        MatSliderModule,\r\n        MatSlideToggleModule,\r\n        MatSnackBarModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatTabsModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        MatTreeModule,\r\n        PortalModule,\r\n        ScrollingModule,\r\n    ],\r\n    exports: [\r\n        A11yModule,\r\n        CdkStepperModule,\r\n        CdkTableModule,\r\n        CdkTreeModule,\r\n        DragDropModule,\r\n        MatAutocompleteModule,\r\n        MatBadgeModule,\r\n        MatBottomSheetModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatCardModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatStepperModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatDividerModule,\r\n        MatExpansionModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatNativeDateModule,\r\n        MatPaginatorModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatRadioModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatSidenavModule,\r\n        MatSliderModule,\r\n        MatSlideToggleModule,\r\n        MatSnackBarModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatTabsModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        MatTreeModule,\r\n        PortalModule,\r\n        ScrollingModule,\r\n    ],\r\n})\r\nexport class MaterialModule {\r\n}\r\n","const IMAGE_BASE_64_REGEX = new RegExp('data\\:image\\/(png|jpeg)\\;base64,([^\\\"]+)');\r\nconst AUDIO_BASE_64_REGEX = new RegExp('data\\:audio\\/(.+)\\;base64,([^\\\"]+)');\r\n\r\nexport class FileUpload {\r\n\r\n    constructor(\r\n        public src: string, /* base64 or url */\r\n        public filename: string\r\n    ) { }\r\n\r\n    hasSameName(fileUpload: FileUpload): boolean {\r\n        let name = this.filename.split('.')[0];\r\n        let name2 = fileUpload.filename.split('.')[0];\r\n        return name === name2;\r\n    }\r\n\r\n    static isValidAudio(fileUpload: FileUpload) {\r\n        return this._isValidSrc(fileUpload.src, AUDIO_BASE_64_REGEX) && !!(fileUpload.filename?.trim());\r\n    }\r\n\r\n    static isValidImage(fileUpload: FileUpload) {\r\n        return this.isValidImageSrc(fileUpload.src) && !!(fileUpload.filename?.trim());\r\n    }\r\n\r\n    static isValidImageSrc(src: string) {\r\n        return this._isValidSrc(src, IMAGE_BASE_64_REGEX);\r\n    }\r\n\r\n    private static _isValidSrc(src: string, base64Regex: RegExp) {\r\n        return this._isValidUrl(src) || base64Regex.test(src);\r\n    }\r\n\r\n    private static _isValidUrl(url: string) {\r\n        return (new RegExp('^(https?:\\\\/\\\\/)?' + // validate protocol\r\n            '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // validate domain name\r\n            '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // validate OR ip (v4) address\r\n            '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // validate port and path\r\n            '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // validate query string\r\n            '(\\\\#[-a-z\\\\d_]*)?$', 'i') // validate fragment locator\r\n        ).test(url);\r\n    }\r\n\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}