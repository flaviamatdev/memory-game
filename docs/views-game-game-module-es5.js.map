{"version":3,"sources":["webpack:///src/app/views/game/game/game.component.ts","webpack:///src/app/views/game/game/game.component.html","webpack:///src/app/shared/components/dialog/dialog.module.ts","webpack:///src/app/views/game/game.module.ts","webpack:///src/app/views/game/memory-card/memory-card.component.ts","webpack:///src/app/views/game/memory-card/memory-card.component.html","webpack:///src/app/views/game/game/game-values.ts"],"names":["STYLE","minWindowWidth","cardWidth","cardMargin","gapBetweenCards","GameComponent","router","gameService","dialogService","translationService","TRANSLATION","backgroundImgSrc","boardStyle","soundIcon","_cards","_numCols","getCurrentNavigation","extras","state","cards","gameConfig","config","length","goHome","_setWidth","window","screen","width","_setSoundIcon","windowWidth","board","card","numCards","filter","n","boardWidth","setIdAsRowColumn","$event","target","innerWidth","playSound","icon","tooltip","btn","sound","turnOnTooltip","turnOffTooltip","swapPlaySound","callback","_startNewGame","isGameFinished","openLiveGameConfirmationDialog","getTranslation","startNewGameConfirmation","setTimeout","restartGame","$card","win","onChooseCard","_openNewGameDialog","winNotificationTimeout","openConfirmationDialog","header","iconColor","title","finishGame","congratulations","bodyText","playAgain","okCallback","newGame","DialogModule","routes","path","component","GameModule","forChild","MemoryCardComponent","onSelect","_isRotated","showFrontAsIcon","cardIdType","ICONS","getCoveredCards","subscribe","coveredCards","map","id","emit","onClick","GAME_TRANSLATION","pt","en"],"mappings":"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","file":"views-game-game-module-es5.js","sourcesContent":["import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { DialogService } from 'src/app/services/dialog.service';\r\nimport { GameService } from 'src/app/services/game.service';\r\nimport { TranslationService } from 'src/app/shared/components/translation/translation.service';\r\nimport { VALUES } from 'src/app/shared/constants/global.values';\r\nimport { Card } from 'src/app/shared/model/card';\r\nimport { GAME_TRANSLATION } from './game-values';\r\n\r\n/* Values in pixels defined at component scss */\r\nconst STYLE = {\r\n    minWindowWidth: 768,\r\n    cardWidth: 100,\r\n    cardMargin: 10,\r\n    gapBetweenCards: 16, /* 1rem */\r\n}\r\n\r\n@Component({\r\n    selector: 'app-game',\r\n    templateUrl: './game.component.html',\r\n    styleUrls: ['./game.component.scss']\r\n})\r\nexport class GameComponent implements OnInit {\r\n\r\n    readonly TRANSLATION = GAME_TRANSLATION;\r\n\r\n    backgroundImgSrc: any = '';\r\n    boardStyle: any= {};\r\n    soundIcon: any = {};\r\n\r\n    private _cards: Card[] = [];\r\n    private _numCols: number = 0;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private gameService: GameService,\r\n        private dialogService: DialogService,\r\n        private translationService: TranslationService,\r\n    ) {\r\n        this._cards = this.router.getCurrentNavigation()?.extras?.state?.cards ?? [];\r\n    }\r\n\r\n    get cards() {\r\n        return this._cards;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        let gameConfig = this.gameService.config;\r\n        if (!gameConfig || !(this._cards?.length)) {\r\n            this.gameService.goHome();\r\n            return;\r\n        }\r\n\r\n        if (gameConfig.backgroundImgSrc) {\r\n            this.backgroundImgSrc = `url(${gameConfig.backgroundImgSrc})`;\r\n        }\r\n        this._setWidth(window.screen.width);\r\n        this._setSoundIcon();\r\n    }\r\n\r\n    private _setWidth(windowWidth: number) {\r\n        if (windowWidth < STYLE.minWindowWidth) {\r\n            this.boardStyle = {\r\n                board: {},\r\n                card: {}\r\n            }\r\n            return;\r\n        }\r\n\r\n        let numCards = this._cards.length;\r\n        this._numCols = ([5,4,3]).filter(n => numCards % n == 0)[0];\r\n        let boardWidth = ((STYLE.cardWidth + 2*STYLE.cardMargin) * this._numCols) + ((this._numCols-1) * STYLE.gapBetweenCards);\r\n        this.boardStyle = { width: `${boardWidth}px` };\r\n\r\n        this.gameService.setIdAsRowColumn(this._cards, this._numCols);\r\n    }\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onResize($event) {\r\n        this._setWidth($event.target.innerWidth);\r\n    }\r\n\r\n    private _setSoundIcon() {\r\n        this.soundIcon = (this.gameService.playSound ? \r\n            { icon: 'volume_up',  tooltip: this.TRANSLATION.btn.sound.turnOnTooltip } :\r\n            { icon: 'volume_off', tooltip: this.TRANSLATION.btn.sound.turnOffTooltip }\r\n        );\r\n    }\r\n\r\n    swapPlaySound() {\r\n        this.gameService.swapPlaySound();\r\n        this._setSoundIcon();\r\n    }\r\n\r\n    newGame() {\r\n        const callback = () => this._startNewGame();\r\n        if (!this.gameService.isGameFinished) {\r\n            return this.dialogService.openLiveGameConfirmationDialog(\r\n                callback, \r\n                this.translationService.getTranslation(this.TRANSLATION.startNewGameConfirmation)\r\n            );\r\n        }\r\n        callback();\r\n    }\r\n\r\n    private _startNewGame() {\r\n        let cards = this._cards;\r\n        this._cards = [];\r\n        setTimeout(() => {\r\n            this._cards = this.gameService.restartGame(cards);\r\n            this.gameService.setIdAsRowColumn(this._cards, this._numCols);\r\n        }, 1);\r\n    }\r\n\r\n    onChooseCard($card: Card) {\r\n        let win = this.gameService.onChooseCard($card);\r\n        if (win) {\r\n            setTimeout(() => {\r\n                this._openNewGameDialog();\r\n            }, VALUES.winNotificationTimeout);\r\n        }\r\n    }\r\n\r\n    private _openNewGameDialog() {\r\n        this.dialogService.openConfirmationDialog({\r\n            header: {\r\n                icon: 'mood',\r\n                iconColor: 'limegreen',\r\n                title: this.translationService.getTranslation(this.TRANSLATION.finishGame.congratulations)\r\n            },\r\n            bodyText: this.translationService.getTranslation(this.TRANSLATION.finishGame.playAgain),\r\n            okCallback: () => this._startNewGame()\r\n        });\r\n    }\r\n\r\n}\r\n","<div class=\"board-background\" [style.background-image]=\"backgroundImgSrc\">\r\n    <div class=\"buttons\">\r\n        <button mat-icon-button (click)=\"swapPlaySound()\" color=\"primary\" \r\n            matTooltip=\"{{ 'TRANSLATION' | translate: soundIcon.tooltip }}\">\r\n            <mat-icon>{{ soundIcon.icon }}</mat-icon>\r\n        </button>\r\n        <button mat-stroked-button (click)=\"newGame()\" color=\"primary\">\r\n            <mat-icon>refresh</mat-icon> {{ 'TRANSLATION' | translate: TRANSLATION.btn.newGame }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"board\" [ngStyle]=\"boardStyle\">\r\n        <div class=\"cards\">\r\n            <app-memory-card *ngFor=\"let card of cards\" [card]=\"card\" (onSelect)=\"onChooseCard($event)\">\r\n            </app-memory-card>\r\n        </div>\r\n    </div>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MaterialModule } from 'src/app/material.module';\r\nimport { ConfirmationDialogComponent } from './confirmation-dialog/confirmation-dialog.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        ConfirmationDialogComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class DialogModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { MaterialModule } from 'src/app/material.module';\r\nimport { DialogModule } from 'src/app/shared/components/dialog/dialog.module';\r\nimport { GameComponent } from './game/game.component';\r\nimport { MemoryCardComponent } from './memory-card/memory-card.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: GameComponent\r\n    }\r\n]\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(routes),\r\n        FontAwesomeModule,\r\n        MaterialModule,\r\n        TranslateModule,\r\n        DialogModule,\r\n    ],\r\n    declarations: [\r\n        GameComponent,\r\n        MemoryCardComponent,\r\n    ],\r\n})\r\nexport class GameModule { }\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { GameService } from 'src/app/services/game.service';\nimport { CardIdTypeEnum } from 'src/app/shared/enums/card-id-type.enum';\nimport { Card } from 'src/app/shared/model/card';\n\n@Component({\n    selector: 'app-memory-card',\n    templateUrl: './memory-card.component.html',\n    styleUrls: ['./memory-card.component.scss']\n})\nexport class MemoryCardComponent implements OnInit {\n\n    @Input() card!: Card;\n\n    @Output() onSelect = new EventEmitter<Card>();\n\n    showFrontAsIcon: boolean;\n\n    private _isRotated: boolean;\n\n    constructor(private gameService: GameService) { }\n\n    get isRotated(): boolean {\n\t\treturn this._isRotated;\n\t}\n\n    ngOnInit(): void {\n        this.showFrontAsIcon = (this.gameService.config.cardIdType === CardIdTypeEnum.ICONS);\n\n        this.gameService.getCoveredCards().subscribe(coveredCards => \n            coveredCards.map(card => this._isRotated = (card.id == this.card.id) ? false : this._isRotated)\n        );\n    }\n\n    onClick() {\n        this._isRotated = true;\n        this.onSelect.emit(this.card);\n    }\n\n}\n","<div class=\"card\" [ngClass]=\"{rotated: isRotated}\" (click)=\"onClick()\">\r\n    <div class=\"card-inner\">\r\n        <div class=\"front\">\r\n            <img *ngIf=\"card.image\" [src]=\"card.image.src\" alt=\"card\">\r\n        </div>\r\n\r\n        <div class=\"back bg-primary\">\r\n            <fa-icon *ngIf=\"showFrontAsIcon; else showCardId\" [icon]=\"card.icon\" size=\"3x\"></fa-icon>\r\n            <ng-template #showCardId>\r\n                <div class=\"card-id-number quicksand\">{{ card.id }}</div>\r\n            </ng-template>\r\n        </div>\r\n    </div>\r\n</div>","export const GAME_TRANSLATION = {\r\n    btn: {\r\n        sound: {\r\n            turnOnTooltip: {\r\n                pt: 'Desligar sons',\r\n                en: 'Turn off sounds'\r\n            },\r\n            turnOffTooltip: {\r\n                pt: 'Ligar sons',\r\n                en: 'Turn on sounds'\r\n            }\r\n        },\r\n\r\n        newGame: {\r\n            pt: 'Novo jogo',\r\n            en: 'New game'\r\n        }\r\n    },\r\n\r\n    startNewGameConfirmation: {\r\n        pt: 'Tem certeza que deseja iniciar novo jogo?',\r\n        en: 'Are you sure you want to start a new game?'\r\n    },\r\n\r\n    finishGame: {\r\n        congratulations: {\r\n            pt: 'Parabéns!',\r\n            en: 'Congratulations!'\r\n        },\r\n        playAgain: {\r\n            pt: 'Deseja jogar novamente?',\r\n            en: 'Do you want to play again?'\r\n        }\r\n    }\r\n}\r\n"]}